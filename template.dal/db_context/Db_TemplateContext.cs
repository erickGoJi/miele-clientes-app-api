// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using template.biz.Entities;

namespace template.dal.db_context
{
    public partial class Db_TemplateContext : DbContext
    {
        public Db_TemplateContext()
        {
        }

        public Db_TemplateContext(DbContextOptions<Db_TemplateContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AccesoriosRelacionados> AccesoriosRelacionados { get; set; }
        public virtual DbSet<AfectacionCc> AfectacionCc { get; set; }
        public virtual DbSet<BeneficioDesc> BeneficioDesc { get; set; }
        public virtual DbSet<BeneficioMsi> BeneficioMsi { get; set; }
        public virtual DbSet<BeneficioProductos> BeneficioProductos { get; set; }
        public virtual DbSet<BeneficiosPromocion> BeneficiosPromocion { get; set; }
        public virtual DbSet<Canales> Canales { get; set; }
        public virtual DbSet<CaracteristicasBases> CaracteristicasBases { get; set; }
        public virtual DbSet<CatAccesorios> CatAccesorios { get; set; }
        public virtual DbSet<CatAccesoriosRelacionados> CatAccesoriosRelacionados { get; set; }
        public virtual DbSet<CatActividad> CatActividad { get; set; }
        public virtual DbSet<CatAplicaciones> CatAplicaciones { get; set; }
        public virtual DbSet<CatAreaCobertura> CatAreaCobertura { get; set; }
        public virtual DbSet<CatBeneficios> CatBeneficios { get; set; }
        public virtual DbSet<CatCanales> CatCanales { get; set; }
        public virtual DbSet<CatCatalogoSuperLinea> CatCatalogoSuperLinea { get; set; }
        public virtual DbSet<CatCategoriaProducto> CatCategoriaProducto { get; set; }
        public virtual DbSet<CatCategoriaServicio> CatCategoriaServicio { get; set; }
        public virtual DbSet<CatChecklistProducto> CatChecklistProducto { get; set; }
        public virtual DbSet<CatCoberturaCodigoPostal> CatCoberturaCodigoPostal { get; set; }
        public virtual DbSet<CatCondicionesComerciales> CatCondicionesComerciales { get; set; }
        public virtual DbSet<CatCondicionesPago> CatCondicionesPago { get; set; }
        public virtual DbSet<CatCuentas> CatCuentas { get; set; }
        public virtual DbSet<CatDireccion> CatDireccion { get; set; }
        public virtual DbSet<CatDireccionSucursales> CatDireccionSucursales { get; set; }
        public virtual DbSet<CatDistribuidorAutorizado> CatDistribuidorAutorizado { get; set; }
        public virtual DbSet<CatEstado> CatEstado { get; set; }
        public virtual DbSet<CatEstatusCompra> CatEstatusCompra { get; set; }
        public virtual DbSet<CatEstatusCotizacion> CatEstatusCotizacion { get; set; }
        public virtual DbSet<CatEstatusProducto> CatEstatusProducto { get; set; }
        public virtual DbSet<CatEstatusServicio> CatEstatusServicio { get; set; }
        public virtual DbSet<CatEstatusVisita> CatEstatusVisita { get; set; }
        public virtual DbSet<CatFalla> CatFalla { get; set; }
        public virtual DbSet<CatFormasPago> CatFormasPago { get; set; }
        public virtual DbSet<CatGarantia> CatGarantia { get; set; }
        public virtual DbSet<CatImagenesAccesosrios> CatImagenesAccesosrios { get; set; }
        public virtual DbSet<CatImagenesProducto> CatImagenesProducto { get; set; }
        public virtual DbSet<CatLineaProducto> CatLineaProducto { get; set; }
        public virtual DbSet<CatListaPrecios> CatListaPrecios { get; set; }
        public virtual DbSet<CatLocalidad> CatLocalidad { get; set; }
        public virtual DbSet<CatMateriales> CatMateriales { get; set; }
        public virtual DbSet<CatMaterialesTecnico> CatMaterialesTecnico { get; set; }
        public virtual DbSet<CatMotivos> CatMotivos { get; set; }
        public virtual DbSet<CatMsi> CatMsi { get; set; }
        public virtual DbSet<CatMunicipio> CatMunicipio { get; set; }
        public virtual DbSet<CatPeriodo> CatPeriodo { get; set; }
        public virtual DbSet<CatProducto> CatProducto { get; set; }
        public virtual DbSet<CatProductos> CatProductos { get; set; }
        public virtual DbSet<CatProductosEstatusTroubleshooting> CatProductosEstatusTroubleshooting { get; set; }
        public virtual DbSet<CatProductosPreguntasTroubleshooting> CatProductosPreguntasTroubleshooting { get; set; }
        public virtual DbSet<CatProductosProblemaTroubleshooting> CatProductosProblemaTroubleshooting { get; set; }
        public virtual DbSet<CatProductosRespuestasTroubleshooting> CatProductosRespuestasTroubleshooting { get; set; }
        public virtual DbSet<CatReparacion> CatReparacion { get; set; }
        public virtual DbSet<CatRoles> CatRoles { get; set; }
        public virtual DbSet<CatSolicitadoPor> CatSolicitadoPor { get; set; }
        public virtual DbSet<CatSolicitudVia> CatSolicitudVia { get; set; }
        public virtual DbSet<CatSubLineaProducto> CatSubLineaProducto { get; set; }
        public virtual DbSet<CatSucursales> CatSucursales { get; set; }
        public virtual DbSet<CatSugeridosProducto> CatSugeridosProducto { get; set; }
        public virtual DbSet<CatSuperLineas> CatSuperLineas { get; set; }
        public virtual DbSet<CatTarjetas> CatTarjetas { get; set; }
        public virtual DbSet<CatTecnicosSubTipo> CatTecnicosSubTipo { get; set; }
        public virtual DbSet<CatTecnicosTipo> CatTecnicosTipo { get; set; }
        public virtual DbSet<CatTipoCondicion> CatTipoCondicion { get; set; }
        public virtual DbSet<CatTipoEntidades> CatTipoEntidades { get; set; }
        public virtual DbSet<CatTipoProductos> CatTipoProductos { get; set; }
        public virtual DbSet<CatTipoRefaccion> CatTipoRefaccion { get; set; }
        public virtual DbSet<CatTipoServicio> CatTipoServicio { get; set; }
        public virtual DbSet<CatTiposComisiones> CatTiposComisiones { get; set; }
        public virtual DbSet<CatTiposHerencia> CatTiposHerencia { get; set; }
        public virtual DbSet<CatUnidadesPorEquipo> CatUnidadesPorEquipo { get; set; }
        public virtual DbSet<CerConsumibles> CerConsumibles { get; set; }
        public virtual DbSet<CerLabor> CerLabor { get; set; }
        public virtual DbSet<CerProductoCarrito> CerProductoCarrito { get; set; }
        public virtual DbSet<CerProductoCliente> CerProductoCliente { get; set; }
        public virtual DbSet<CerViaticos> CerViaticos { get; set; }
        public virtual DbSet<CheckListPreguntas> CheckListPreguntas { get; set; }
        public virtual DbSet<CheckListRespuestas> CheckListRespuestas { get; set; }
        public virtual DbSet<ClienteProductos> ClienteProductos { get; set; }
        public virtual DbSet<Clientes> Clientes { get; set; }
        public virtual DbSet<ComAfectacionCcs> ComAfectacionCcs { get; set; }
        public virtual DbSet<ComEntidadesParticipantes> ComEntidadesParticipantes { get; set; }
        public virtual DbSet<ComProductoPromocions> ComProductoPromocions { get; set; }
        public virtual DbSet<ComProductosCondicions> ComProductosCondicions { get; set; }
        public virtual DbSet<ComisionesPromoSublineaConfig> ComisionesPromoSublineaConfig { get; set; }
        public virtual DbSet<ComisionesSucursales> ComisionesSucursales { get; set; }
        public virtual DbSet<ComisionesVendedores> ComisionesVendedores { get; set; }
        public virtual DbSet<CondicionesComercialesCuenta> CondicionesComercialesCuenta { get; set; }
        public virtual DbSet<CondionesComercialesSucursal> CondionesComercialesSucursal { get; set; }
        public virtual DbSet<ConfigComisiones> ConfigComisiones { get; set; }
        public virtual DbSet<CotizacionMontoDescuento> CotizacionMontoDescuento { get; set; }
        public virtual DbSet<CotizacionProducto> CotizacionProducto { get; set; }
        public virtual DbSet<CotizacionPromocion> CotizacionPromocion { get; set; }
        public virtual DbSet<Cotizaciones> Cotizaciones { get; set; }
        public virtual DbSet<DatosFiscales> DatosFiscales { get; set; }
        public virtual DbSet<DatosFiscalesCanales> DatosFiscalesCanales { get; set; }
        public virtual DbSet<DatosFiscalesSucursales> DatosFiscalesSucursales { get; set; }
        public virtual DbSet<DireccionesCliente> DireccionesCliente { get; set; }
        public virtual DbSet<DireccionesCotizacion> DireccionesCotizacion { get; set; }
        public virtual DbSet<DocumentosCotizacion> DocumentosCotizacion { get; set; }
        public virtual DbSet<EncuestaGeneral> EncuestaGeneral { get; set; }
        public virtual DbSet<EncuestaQueja> EncuestaQueja { get; set; }
        public virtual DbSet<EntidadesExcluidas> EntidadesExcluidas { get; set; }
        public virtual DbSet<EntidadesObligatorias> EntidadesObligatorias { get; set; }
        public virtual DbSet<EntidadesParticipantes> EntidadesParticipantes { get; set; }
        public virtual DbSet<FormasPagoTiposComprobantes> FormasPagoTiposComprobantes { get; set; }
        public virtual DbSet<HistorialEstatus> HistorialEstatus { get; set; }
        public virtual DbSet<HomeProductoCliente> HomeProductoCliente { get; set; }
        public virtual DbSet<HomeProductoEstados> HomeProductoEstados { get; set; }
        public virtual DbSet<InformeParteRecibida> InformeParteRecibida { get; set; }
        public virtual DbSet<LogRefacciones> LogRefacciones { get; set; }
        public virtual DbSet<Mensajes> Mensajes { get; set; }
        public virtual DbSet<Notificaciones> Notificaciones { get; set; }
        public virtual DbSet<NotificacionesComerciales> NotificacionesComerciales { get; set; }
        public virtual DbSet<NotificationApp> NotificationApp { get; set; }
        public virtual DbSet<ParametroArchivos> ParametroArchivos { get; set; }
        public virtual DbSet<ParametroTerminosCondiciones> ParametroTerminosCondiciones { get; set; }
        public virtual DbSet<PermisosFlujoCotizacion> PermisosFlujoCotizacion { get; set; }
        public virtual DbSet<PiezasRepuesto> PiezasRepuesto { get; set; }
        public virtual DbSet<PiezasRepuestoTecnico> PiezasRepuestoTecnico { get; set; }
        public virtual DbSet<Prediagnostico> Prediagnostico { get; set; }
        public virtual DbSet<PrediagnosticoRefacciones> PrediagnosticoRefacciones { get; set; }
        public virtual DbSet<ProductoCertificadoSublinea> ProductoCertificadoSublinea { get; set; }
        public virtual DbSet<ProductoCheckListRespuestas> ProductoCheckListRespuestas { get; set; }
        public virtual DbSet<ProductoPromocion> ProductoPromocion { get; set; }
        public virtual DbSet<ProductosCarrito> ProductosCarrito { get; set; }
        public virtual DbSet<ProductosCondicion> ProductosCondicion { get; set; }
        public virtual DbSet<ProductosExcluidos> ProductosExcluidos { get; set; }
        public virtual DbSet<ProductosQuejas> ProductosQuejas { get; set; }
        public virtual DbSet<ProductosRelacionados> ProductosRelacionados { get; set; }
        public virtual DbSet<Promocion> Promocion { get; set; }
        public virtual DbSet<PromocionesCompatibles> PromocionesCompatibles { get; set; }
        public virtual DbSet<Propuestas> Propuestas { get; set; }
        public virtual DbSet<Quejas> Quejas { get; set; }
        public virtual DbSet<QuejasServicios> QuejasServicios { get; set; }
        public virtual DbSet<RegistroItems> RegistroItems { get; set; }
        public virtual DbSet<RelCategoriaProductoTipoProducto> RelCategoriaProductoTipoProducto { get; set; }
        public virtual DbSet<RelCertificadoCarrito> RelCertificadoCarrito { get; set; }
        public virtual DbSet<RelCertificadoProducto> RelCertificadoProducto { get; set; }
        public virtual DbSet<RelCertificadoProductoConsumibles> RelCertificadoProductoConsumibles { get; set; }
        public virtual DbSet<RelConsumibleSublinea> RelConsumibleSublinea { get; set; }
        public virtual DbSet<RelHomepProductos> RelHomepProductos { get; set; }
        public virtual DbSet<RelImagenProductoVisita> RelImagenProductoVisita { get; set; }
        public virtual DbSet<RelServicioCategoriaApp> RelServicioCategoriaApp { get; set; }
        public virtual DbSet<RelServicioProducto> RelServicioProducto { get; set; }
        public virtual DbSet<RelServicioRefaccion> RelServicioRefaccion { get; set; }
        public virtual DbSet<RelTecnicoVisita> RelTecnicoVisita { get; set; }
        public virtual DbSet<RelTecnicoVisitaApp> RelTecnicoVisitaApp { get; set; }
        public virtual DbSet<RelUserUserApp> RelUserUserApp { get; set; }
        public virtual DbSet<Servicio> Servicio { get; set; }
        public virtual DbSet<ServicioApp> ServicioApp { get; set; }
        public virtual DbSet<ServicioFotos> ServicioFotos { get; set; }
        public virtual DbSet<ServicioFotosApp> ServicioFotosApp { get; set; }
        public virtual DbSet<ServicioSinPagos> ServicioSinPagos { get; set; }
        public virtual DbSet<ServicioTroubleshooting> ServicioTroubleshooting { get; set; }
        public virtual DbSet<StockInicial> StockInicial { get; set; }
        public virtual DbSet<SubCatTipoServicio> SubCatTipoServicio { get; set; }
        public virtual DbSet<SublineaCertificadoPartners> SublineaCertificadoPartners { get; set; }
        public virtual DbSet<Tecnicos> Tecnicos { get; set; }
        public virtual DbSet<TecnicosActividad> TecnicosActividad { get; set; }
        public virtual DbSet<TecnicosCobertura> TecnicosCobertura { get; set; }
        public virtual DbSet<TecnicosProducto> TecnicosProducto { get; set; }
        public virtual DbSet<TipoQueja> TipoQueja { get; set; }
        public virtual DbSet<TiposComprobantes> TiposComprobantes { get; set; }
        public virtual DbSet<TokenItems> TokenItems { get; set; }
        public virtual DbSet<UserClientsApp> UserClientsApp { get; set; }
        public virtual DbSet<UserSubLineaApp> UserSubLineaApp { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<Vendedores> Vendedores { get; set; }
        public virtual DbSet<Visita> Visita { get; set; }
        public virtual DbSet<VisitaApp> VisitaApp { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity<AccesoriosRelacionados>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdProductoPadre).HasColumnName("id_producto_padre");

                entity.Property(e => e.IdProductoRecomendado).HasColumnName("id_producto_recomendado");
            });

            modelBuilder.Entity<AfectacionCc>(entity =>
            {
                entity.ToTable("afectacion_cc");

                entity.HasIndex(e => e.IdCondionesComercialesSucursal);

                entity.HasIndex(e => e.IdPromocion);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdCondionesComercialesSucursal).HasColumnName("id_condiones_comerciales_sucursal");

                entity.Property(e => e.IdPromocion).HasColumnName("id_promocion");

                entity.Property(e => e.Margen).HasColumnName("margen");

                entity.HasOne(d => d.IdCondionesComercialesSucursalNavigation)
                    .WithMany(p => p.AfectacionCc)
                    .HasForeignKey(d => d.IdCondionesComercialesSucursal)
                    .HasConstraintName("ForeignKey_afectacioncc_condiones_comerciales_sucursal2");

                entity.HasOne(d => d.IdPromocionNavigation)
                    .WithMany(p => p.AfectacionCc)
                    .HasForeignKey(d => d.IdPromocion)
                    .HasConstraintName("ForeignKey_9afectacion_cc_promocion2");
            });

            modelBuilder.Entity<BeneficioDesc>(entity =>
            {
                entity.ToTable("beneficio_desc");

                entity.HasIndex(e => e.IdPromocion);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cantidad).HasColumnName("cantidad");

                entity.Property(e => e.EsPorcentaje).HasColumnName("es_porcentaje");

                entity.Property(e => e.IdPromocion).HasColumnName("id_promocion");

                entity.HasOne(d => d.IdPromocionNavigation)
                    .WithMany(p => p.BeneficioDesc)
                    .HasForeignKey(d => d.IdPromocion)
                    .HasConstraintName("ForeignKey_7beneficiodesc_promocion2");
            });

            modelBuilder.Entity<BeneficioMsi>(entity =>
            {
                entity.ToTable("beneficio_msi");

                entity.HasIndex(e => e.IdCatMsi);

                entity.HasIndex(e => e.IdPromocion);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdCatMsi).HasColumnName("id_cat_msi");

                entity.Property(e => e.IdPromocion).HasColumnName("id_promocion");

                entity.HasOne(d => d.IdCatMsiNavigation)
                    .WithMany(p => p.BeneficioMsi)
                    .HasForeignKey(d => d.IdCatMsi)
                    .HasConstraintName("ForeignKey_beneficiomsi_catmsi2");

                entity.HasOne(d => d.IdPromocionNavigation)
                    .WithMany(p => p.BeneficioMsi)
                    .HasForeignKey(d => d.IdPromocion)
                    .HasConstraintName("ForeignKey_beneficiomsi_promo52");
            });

            modelBuilder.Entity<BeneficioProductos>(entity =>
            {
                entity.ToTable("beneficio_productos");

                entity.HasIndex(e => e.IdPromocion);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cantidad).HasColumnName("cantidad");

                entity.Property(e => e.IdProducto).HasColumnName("id_producto");

                entity.Property(e => e.IdPromocion).HasColumnName("id_promocion");

                entity.HasOne(d => d.IdPromocionNavigation)
                    .WithMany(p => p.BeneficioProductos)
                    .HasForeignKey(d => d.IdPromocion)
                    .HasConstraintName("ForeignKey_8beneficioproductos_promocion2");
            });

            modelBuilder.Entity<BeneficiosPromocion>(entity =>
            {
                entity.ToTable("beneficios_promocion");

                entity.HasIndex(e => e.IdCatBeneficios);

                entity.HasIndex(e => e.IdPromocion);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdCatBeneficios).HasColumnName("id_cat_beneficios");

                entity.Property(e => e.IdPromocion).HasColumnName("id_promocion");

                entity.HasOne(d => d.IdCatBeneficiosNavigation)
                    .WithMany(p => p.BeneficiosPromocion)
                    .HasForeignKey(d => d.IdCatBeneficios)
                    .HasConstraintName("ForeignKey_beneficiospromocion_cattipoentidades2");

                entity.HasOne(d => d.IdPromocionNavigation)
                    .WithMany(p => p.BeneficiosPromocion)
                    .HasForeignKey(d => d.IdPromocion)
                    .HasConstraintName("ForeignKey_6beneficiospromocion_promocion2");
            });

            modelBuilder.Entity<Canales>(entity =>
            {
                entity.Property(e => e.Nombre).IsRequired();
            });

            modelBuilder.Entity<CaracteristicasBases>(entity =>
            {
                entity.ToTable("caracteristicas_Bases");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Descripcion).HasColumnName("descripcion");

                entity.Property(e => e.Estatus).HasColumnName("estatus");
            });

            modelBuilder.Entity<CatAccesorios>(entity =>
            {
                entity.ToTable("Cat_Accesorios");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Actualizado).HasColumnName("actualizado");

                entity.Property(e => e.Actualizadopor).HasColumnName("actualizadopor");

                entity.Property(e => e.Atributos).HasColumnName("atributos");

                entity.Property(e => e.Creado).HasColumnName("creado");

                entity.Property(e => e.Creadopor).HasColumnName("creadopor");

                entity.Property(e => e.DescripcionCorta).HasColumnName("descripcion_corta");

                entity.Property(e => e.DescripcionLarga).HasColumnName("descripcion_larga");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.FichaTecnica).HasColumnName("ficha_tecnica");

                entity.Property(e => e.Modelo).HasColumnName("modelo");

                entity.Property(e => e.Nombre).HasColumnName("nombre");

                entity.Property(e => e.PrecioConIva).HasColumnName("precio_con_iva");

                entity.Property(e => e.PrecioSinIva).HasColumnName("precio_sin_iva");

                entity.Property(e => e.Sku).HasColumnName("sku");
            });

            modelBuilder.Entity<CatAccesoriosRelacionados>(entity =>
            {
                entity.ToTable("Cat_Accesorios_Relacionados");

                entity.HasIndex(e => e.IdAccesorio);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.IdAccesorio).HasColumnName("id_Accesorio");

                entity.Property(e => e.SkuSugerido).HasColumnName("sku_sugerido");

                entity.HasOne(d => d.IdAccesorioNavigation)
                    .WithMany(p => p.CatAccesoriosRelacionados)
                    .HasForeignKey(d => d.IdAccesorio)
                    .HasConstraintName("ForeignKey_Accesorios_relacionados");
            });

            modelBuilder.Entity<CatActividad>(entity =>
            {
                entity.ToTable("Cat_Actividad");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DescActividad).HasColumnName("desc_actividad");

                entity.Property(e => e.Estatus).HasColumnName("estatus");
            });

            modelBuilder.Entity<CatAplicaciones>(entity =>
            {
                entity.ToTable("Cat_Aplicaciones");

                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<CatAreaCobertura>(entity =>
            {
                entity.ToTable("Cat_Area_Cobertura");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DescCobertura).HasColumnName("desc_cobertura");

                entity.Property(e => e.Estatus).HasColumnName("estatus");
            });

            modelBuilder.Entity<CatBeneficios>(entity =>
            {
                entity.ToTable("cat_beneficios");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Beneficio).HasColumnName("beneficio");
            });

            modelBuilder.Entity<CatCanales>(entity =>
            {
                entity.ToTable("Cat_canales");

                entity.Property(e => e.CanalEn).HasColumnName("Canal_en");

                entity.Property(e => e.CanalEs).HasColumnName("Canal_es");
            });

            modelBuilder.Entity<CatCatalogoSuperLinea>(entity =>
            {
                entity.ToTable("Cat_Catalogo_Super_Linea");

                entity.HasIndex(e => e.CatCanalesId);

                entity.HasIndex(e => e.Catsuperlineaid);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CatCanalesId).HasColumnName("cat_canalesId");

                entity.Property(e => e.Catsuperlineaid).HasColumnName("catsuperlineaid");

                entity.Property(e => e.Compatible).HasColumnName("compatible");

                entity.Property(e => e.IsActive).HasColumnName("isActive");
            });

            modelBuilder.Entity<CatCategoriaProducto>(entity =>
            {
                entity.ToTable("Cat_Categoria_Producto");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Codigo).HasColumnName("codigo");

                entity.Property(e => e.Descripcion).HasColumnName("descripcion");

                entity.Property(e => e.Estatus).HasColumnName("estatus");
            });

            modelBuilder.Entity<CatCategoriaServicio>(entity =>
            {
                entity.ToTable("Cat_Categoria_Servicio");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DescCategoriaServicio).HasColumnName("desc_categoria_servicio");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.IdTipoServicio).HasColumnName("id_tipo_servicio");
            });

            modelBuilder.Entity<CatChecklistProducto>(entity =>
            {
                entity.ToTable("Cat_Checklist_Producto");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DescChecklistProducto).HasColumnName("desc_checklist_producto");

                entity.Property(e => e.Estatus).HasColumnName("estatus");
            });

            modelBuilder.Entity<CatCoberturaCodigoPostal>(entity =>
            {
                entity.ToTable("Cat_CoberturaCodigoPostal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Codigo)
                    .HasColumnName("codigo")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Costo)
                    .HasColumnName("costo")
                    .HasColumnType("decimal(7, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Viaticos)
                    .HasColumnName("viaticos")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<CatCondicionesComerciales>(entity =>
            {
                entity.ToTable("Cat_CondicionesComerciales");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Activa).HasColumnName("activa");

                entity.Property(e => e.CondicionComercial).HasColumnName("condicion_comercial");

                entity.Property(e => e.MesesCredito).HasColumnName("meses_credito");

                entity.Property(e => e.MontoDescuento).HasColumnName("monto_descuento");

                entity.Property(e => e.NumMesesSinint).HasColumnName("num_meses_sinint");

                entity.Property(e => e.PorcentajeCredito).HasColumnName("porcentaje_credito");

                entity.Property(e => e.PorcentajeDescuento).HasColumnName("porcentaje_descuento");

                entity.Property(e => e.Tipo).HasColumnName("tipo");
            });

            modelBuilder.Entity<CatCondicionesPago>(entity =>
            {
                entity.ToTable("Cat_CondicionesPago");

                entity.HasIndex(e => e.IdCatFormasPago);

                entity.HasIndex(e => e.IdCuenta);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdCatFormasPago).HasColumnName("id_Cat_Formas_Pago");

                entity.Property(e => e.IdCuenta).HasColumnName("id_cuenta");

                entity.HasOne(d => d.IdCatFormasPagoNavigation)
                    .WithMany(p => p.CatCondicionesPago)
                    .HasForeignKey(d => d.IdCatFormasPago)
                    .HasConstraintName("ForeignKey_Cat_Formas_Pago_Cat_CondicionesPago");

                entity.HasOne(d => d.IdCuentaNavigation)
                    .WithMany(p => p.CatCondicionesPago)
                    .HasForeignKey(d => d.IdCuenta)
                    .HasConstraintName("ForeignKey_cuentas_Cat_CondicionesPago");
            });

            modelBuilder.Entity<CatCuentas>(entity =>
            {
                entity.ToTable("Cat_Cuentas");

                entity.HasIndex(e => e.IdCanal);

                entity.Property(e => e.CuentaEn).HasColumnName("Cuenta_en");

                entity.Property(e => e.CuentaEs).HasColumnName("Cuenta_es");

                entity.Property(e => e.IdCanal).HasColumnName("Id_Canal");

                entity.HasOne(d => d.IdCanalNavigation)
                    .WithMany(p => p.CatCuentas)
                    .HasForeignKey(d => d.IdCanal)
                    .HasConstraintName("ForeignKey_Canal_cuenta");
            });

            modelBuilder.Entity<CatDireccion>(entity =>
            {
                entity.ToTable("Cat_Direccion");

                entity.HasIndex(e => e.IdCliente);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Actualizado).HasColumnName("actualizado");

                entity.Property(e => e.Actualizadopor).HasColumnName("actualizadopor");

                entity.Property(e => e.CalleNumero).HasColumnName("calle_numero");

                entity.Property(e => e.Colonia).HasColumnName("colonia");

                entity.Property(e => e.Cp).HasColumnName("cp");

                entity.Property(e => e.Creado).HasColumnName("creado");

                entity.Property(e => e.Creadopor).HasColumnName("creadopor");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.FechaEstimada).HasColumnName("Fecha_Estimada");

                entity.Property(e => e.IdCliente).HasColumnName("id_cliente");

                entity.Property(e => e.IdEstado).HasColumnName("id_estado");

                entity.Property(e => e.IdLocalidad).HasColumnName("id_localidad");

                entity.Property(e => e.IdMunicipio).HasColumnName("id_municipio");

                entity.Property(e => e.IdPrefijoCalle).HasColumnName("id_prefijo_calle");

                entity.Property(e => e.Nombrecontacto).HasColumnName("nombrecontacto");

                entity.Property(e => e.NumExt).HasColumnName("numExt");

                entity.Property(e => e.NumInt).HasColumnName("numInt");

                entity.Property(e => e.Telefono).HasColumnName("telefono");

                entity.Property(e => e.TelefonoMovil).HasColumnName("telefono_movil");

                entity.Property(e => e.TipoDireccion).HasColumnName("tipo_direccion");

                entity.HasOne(d => d.IdClienteNavigation)
                    .WithMany(p => p.CatDireccion)
                    .HasForeignKey(d => d.IdCliente)
                    .HasConstraintName("ForeignKey_Direccion_Cliente");
            });

            modelBuilder.Entity<CatDireccionSucursales>(entity =>
            {
                entity.ToTable("cat_direccion_sucursales");

                entity.HasIndex(e => e.IdSucursales);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Actualizado).HasColumnName("actualizado");

                entity.Property(e => e.Actualizadopor).HasColumnName("actualizadopor");

                entity.Property(e => e.CalleNumero).HasColumnName("calle_numero");

                entity.Property(e => e.Colonia).HasColumnName("colonia");

                entity.Property(e => e.Cp).HasColumnName("cp");

                entity.Property(e => e.Creado).HasColumnName("creado");

                entity.Property(e => e.Creadopor).HasColumnName("creadopor");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.FechaEstimada).HasColumnName("Fecha_Estimada");

                entity.Property(e => e.IdEstado).HasColumnName("id_estado");

                entity.Property(e => e.IdLocalidad).HasColumnName("id_localidad");

                entity.Property(e => e.IdMunicipio).HasColumnName("id_municipio");

                entity.Property(e => e.IdPrefijoCalle).HasColumnName("id_prefijo_calle");

                entity.Property(e => e.IdSucursales).HasColumnName("id_sucursales");

                entity.Property(e => e.Nombrecontacto).HasColumnName("nombrecontacto");

                entity.Property(e => e.NumExt).HasColumnName("numExt");

                entity.Property(e => e.NumInt).HasColumnName("numInt");

                entity.Property(e => e.Telefono).HasColumnName("telefono");

                entity.Property(e => e.TelefonoMovil).HasColumnName("telefono_movil");

                entity.Property(e => e.TipoDireccion).HasColumnName("tipo_direccion");

                entity.HasOne(d => d.IdSucursalesNavigation)
                    .WithMany(p => p.CatDireccionSucursales)
                    .HasForeignKey(d => d.IdSucursales)
                    .HasConstraintName("ForeignKey_cat_direcciones_sucu_cat_suc");
            });

            modelBuilder.Entity<CatDistribuidorAutorizado>(entity =>
            {
                entity.ToTable("Cat_distribuidor_autorizado");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DescDistribuidor).HasColumnName("desc_distribuidor");

                entity.Property(e => e.Estatus).HasColumnName("estatus");
            });

            modelBuilder.Entity<CatEstado>(entity =>
            {
                entity.ToTable("Cat_Estado");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DescEstado).HasColumnName("desc_estado");

                entity.Property(e => e.Estatus).HasColumnName("estatus");
            });

            modelBuilder.Entity<CatEstatusCompra>(entity =>
            {
                entity.ToTable("Cat_Estatus_Compra");

                entity.Property(e => e.EstatusEn).HasColumnName("Estatus_en");

                entity.Property(e => e.EstatusEs).HasColumnName("Estatus_es");
            });

            modelBuilder.Entity<CatEstatusCotizacion>(entity =>
            {
                entity.ToTable("Cat_Estatus_Cotizacion");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.EstatusEn).HasColumnName("Estatus_en");

                entity.Property(e => e.EstatusEs).HasColumnName("Estatus_es");
            });

            modelBuilder.Entity<CatEstatusProducto>(entity =>
            {
                entity.ToTable("CatEstatus_Producto");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DescEstatusProducto).HasColumnName("desc_estatus_producto");

                entity.Property(e => e.DescEstatusProductoEn).HasColumnName("desc_estatus_producto_en");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.IdTipoServicio).HasColumnName("id_tipo_servicio");
            });

            modelBuilder.Entity<CatEstatusServicio>(entity =>
            {
                entity.ToTable("Cat_estatus_servicio");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DescEstatusServicio).HasColumnName("desc_estatus_servicio");

                entity.Property(e => e.DescEstatusServicioEn).HasColumnName("desc_estatus_servicio_en");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.IdTipoServicio).HasColumnName("id_tipo_servicio");
            });

            modelBuilder.Entity<CatEstatusVisita>(entity =>
            {
                entity.ToTable("CatEstatus_Visita");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DescEstatusVisita).HasColumnName("desc_estatus_visita");

                entity.Property(e => e.DescEstatusVisitaEn).HasColumnName("desc_estatus_visita_en");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.IdTipoServicio).HasColumnName("id_tipo_servicio");
            });

            modelBuilder.Entity<CatFalla>(entity =>
            {
                entity.ToTable("cat_falla");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DescFallaEn).HasColumnName("desc_falla_en");

                entity.Property(e => e.DescFallaEs).HasColumnName("desc_falla_es");

                entity.Property(e => e.Estatus).HasColumnName("estatus");
            });

            modelBuilder.Entity<CatFormasPago>(entity =>
            {
                entity.ToTable("Cat_Formas_Pago");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ComprobantesObligatorios).HasColumnName("comprobantes_obligatorios");
            });

            modelBuilder.Entity<CatGarantia>(entity =>
            {
                entity.ToTable("cat_garantia");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DescGarantia).HasColumnName("desc_garantia");

                entity.Property(e => e.Garantia).HasColumnName("garantia");
            });

            modelBuilder.Entity<CatImagenesAccesosrios>(entity =>
            {
                entity.ToTable("Cat_Imagenes_Accesosrios");

                entity.HasIndex(e => e.IdAccesorio);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.IdAccesorio).HasColumnName("id_Accesorio");

                entity.Property(e => e.Url).HasColumnName("url");

                entity.HasOne(d => d.IdAccesorioNavigation)
                    .WithMany(p => p.CatImagenesAccesosrios)
                    .HasForeignKey(d => d.IdAccesorio)
                    .HasConstraintName("ForeignKey_Imagen_Accesorios");
            });

            modelBuilder.Entity<CatImagenesProducto>(entity =>
            {
                entity.ToTable("Cat_Imagenes_Producto");

                entity.HasIndex(e => e.IdProducto);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.IdProducto).HasColumnName("id_producto");

                entity.Property(e => e.Url).HasColumnName("url");

                entity.HasOne(d => d.IdProductoNavigation)
                    .WithMany(p => p.CatImagenesProducto)
                    .HasForeignKey(d => d.IdProducto)
                    .HasConstraintName("ForeignKey_Imagen_Producto");
            });

            modelBuilder.Entity<CatLineaProducto>(entity =>
            {
                entity.ToTable("Cat_Linea_Producto");

                entity.HasIndex(e => e.IdSuperlinea);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Descripcion).HasColumnName("descripcion");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.IdSuperlinea).HasColumnName("id_superlinea");

                entity.HasOne(d => d.IdSuperlineaNavigation)
                    .WithMany(p => p.CatLineaProducto)
                    .HasForeignKey(d => d.IdSuperlinea)
                    .HasConstraintName("ForeignKey_Cat_linea_Cat_superlinea");
            });

            modelBuilder.Entity<CatListaPrecios>(entity =>
            {
                entity.ToTable("Cat_Lista_Precios");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.GrupoPrecio).HasColumnName("grupo_precio");

                entity.Property(e => e.PrecioSinIva)
                    .HasColumnName("precio_sin_iva")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<CatLocalidad>(entity =>
            {
                entity.ToTable("Cat_Localidad");

                entity.HasIndex(e => e.Municipioid);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cp).HasColumnName("cp");

                entity.Property(e => e.DescLocalidad).HasColumnName("desc_localidad");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.Municipioid).HasColumnName("municipioid");

                entity.Property(e => e.Zona).HasColumnName("zona");

                entity.HasOne(d => d.Municipio)
                    .WithMany(p => p.CatLocalidad)
                    .HasForeignKey(d => d.Municipioid);
            });

            modelBuilder.Entity<CatMateriales>(entity =>
            {
                entity.ToTable("Cat_Materiales");

                entity.HasIndex(e => e.IdGrupoPrecio);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cantidad).HasColumnName("cantidad");

                entity.Property(e => e.Descripcion).HasColumnName("descripcion");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.IdGrupoPrecio).HasColumnName("id_grupo_precio");

                entity.Property(e => e.NoMaterial).HasColumnName("no_material");

                entity.HasOne(d => d.IdGrupoPrecioNavigation)
                    .WithMany(p => p.CatMateriales)
                    .HasForeignKey(d => d.IdGrupoPrecio)
                    .HasConstraintName("ForeignKey_Material_Grupo_Precio");
            });

            modelBuilder.Entity<CatMaterialesTecnico>(entity =>
            {
                entity.ToTable("Cat_Materiales_Tecnico");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cantidad).HasColumnName("cantidad");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.IdMaterial).HasColumnName("id_material");

                entity.Property(e => e.IdTecnico).HasColumnName("id_tecnico");
            });

            modelBuilder.Entity<CatMotivos>(entity =>
            {
                entity.ToTable("cat_Motivos");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Correo).HasColumnName("correo");

                entity.Property(e => e.Descripcion).HasColumnName("descripcion");

                entity.Property(e => e.Estatus).HasColumnName("estatus");
            });

            modelBuilder.Entity<CatMsi>(entity =>
            {
                entity.ToTable("cat_msi");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DescMsi).HasColumnName("desc_msi");
            });

            modelBuilder.Entity<CatMunicipio>(entity =>
            {
                entity.ToTable("Cat_Municipio");

                entity.HasIndex(e => e.Estadoid);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DescMunicipio).HasColumnName("desc_municipio");

                entity.Property(e => e.Estadoid).HasColumnName("estadoid");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.HasOne(d => d.Estado)
                    .WithMany(p => p.CatMunicipio)
                    .HasForeignKey(d => d.Estadoid);
            });

            modelBuilder.Entity<CatPeriodo>(entity =>
            {
                entity.ToTable("cat_periodo");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DescPeriodio).HasColumnName("desc_periodio");
            });

            modelBuilder.Entity<CatProducto>(entity =>
            {
                entity.ToTable("Cat_Producto");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DescProducto).HasColumnName("desc_producto");

                entity.Property(e => e.Estatus).HasColumnName("estatus");
            });

            modelBuilder.Entity<CatProductos>(entity =>
            {
                entity.ToTable("Cat_Productos");

                entity.HasIndex(e => e.IdCaracteristicaBase);

                entity.HasIndex(e => e.IdLinea);

                entity.HasIndex(e => e.IdSublinea);

                entity.HasIndex(e => e.StcInicialid);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Actualizado).HasColumnName("actualizado");

                entity.Property(e => e.Actualizadopor).HasColumnName("actualizadopor");

                entity.Property(e => e.Atributos).HasColumnName("atributos");

                entity.Property(e => e.Creado).HasColumnName("creado");

                entity.Property(e => e.Creadopor).HasColumnName("creadopor");

                entity.Property(e => e.DescripcionCorta).HasColumnName("descripcion_corta");

                entity.Property(e => e.DescripcionLarga).HasColumnName("descripcion_larga");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.FichaTecnica).HasColumnName("ficha_tecnica");

                entity.Property(e => e.HorasTecnico).HasColumnName("horas_tecnico");

                entity.Property(e => e.IdCaracteristicaBase).HasColumnName("id_caracteristica_base");

                entity.Property(e => e.IdCategoria).HasColumnName("id_categoria");

                entity.Property(e => e.IdLinea).HasColumnName("id_linea");

                entity.Property(e => e.IdSublinea).HasColumnName("id_sublinea");

                entity.Property(e => e.ManejosStockCheck).HasColumnName("manejos_stock_check");

                entity.Property(e => e.MinimoCarrito).HasColumnName("minimo_Carrito");

                entity.Property(e => e.Modelo).HasColumnName("modelo");

                entity.Property(e => e.NoSerie).HasColumnName("no_serie");

                entity.Property(e => e.NoTecnico).HasColumnName("no_tecnico");

                entity.Property(e => e.Nombre).HasColumnName("nombre");

                entity.Property(e => e.NumeroMinimiCarrito).HasColumnName("numero_Minimi_Carrito");

                entity.Property(e => e.PrecioConIva).HasColumnName("precio_con_iva");

                entity.Property(e => e.PrecioHora)
                    .HasColumnName("precio_hora")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PrecioSinIva).HasColumnName("precio_sin_iva");

                entity.Property(e => e.RequiereInstalacion).HasColumnName("requiere_instalacion");

                entity.Property(e => e.Sku).HasColumnName("sku");

                entity.Property(e => e.StcInicialid)
                    .HasColumnName("stcInicialid")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipo).HasColumnName("tipo");

                entity.Property(e => e.UrlGuia).HasColumnName("url_guia");

                entity.Property(e => e.UrlImpresion).HasColumnName("url_impresion");

                entity.Property(e => e.UrlManual).HasColumnName("url_manual");

                entity.Property(e => e.VisiblePartners).HasColumnName("visible_partners");

                entity.HasOne(d => d.IdCaracteristicaBaseNavigation)
                    .WithMany(p => p.CatProductos)
                    .HasForeignKey(d => d.IdCaracteristicaBase)
                    .HasConstraintName("ForeignKey_cat_productos_caracteristica_base");

                entity.HasOne(d => d.IdLineaNavigation)
                    .WithMany(p => p.CatProductos)
                    .HasForeignKey(d => d.IdLinea)
                    .HasConstraintName("ForeignKey_Linea_Producto");

                entity.HasOne(d => d.IdSublineaNavigation)
                    .WithMany(p => p.CatProductos)
                    .HasForeignKey(d => d.IdSublinea)
                    .HasConstraintName("ForeignKey_Sublinea_Producto");

                entity.HasOne(d => d.StcInicial)
                    .WithMany(p => p.CatProductos)
                    .HasForeignKey(d => d.StcInicialid)
                    .HasConstraintName("FK_Cat_Productos_stockinicial_stcInicialid");
            });

            modelBuilder.Entity<CatProductosEstatusTroubleshooting>(entity =>
            {
                entity.ToTable("Cat_Productos_Estatus_Troubleshooting");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Codigo).HasColumnName("codigo");

                entity.Property(e => e.DescTroubleshooting).HasColumnName("desc_troubleshooting");

                entity.Property(e => e.Estatus).HasColumnName("estatus");
            });

            modelBuilder.Entity<CatProductosPreguntasTroubleshooting>(entity =>
            {
                entity.ToTable("Cat_Productos_Preguntas_Troubleshooting");

                entity.HasIndex(e => e.CatProductosid);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Actualizado).HasColumnName("actualizado");

                entity.Property(e => e.Actualizadopor).HasColumnName("actualizadopor");

                entity.Property(e => e.CatProductosid).HasColumnName("Cat_Productosid");

                entity.Property(e => e.Creado).HasColumnName("creado");

                entity.Property(e => e.Creadopor).HasColumnName("creadopor");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.IdProblema).HasColumnName("id_problema");

                entity.Property(e => e.Pregunta).HasColumnName("pregunta");

                entity.HasOne(d => d.CatProductos)
                    .WithMany(p => p.CatProductosPreguntasTroubleshooting)
                    .HasForeignKey(d => d.CatProductosid);
            });

            modelBuilder.Entity<CatProductosProblemaTroubleshooting>(entity =>
            {
                entity.ToTable("Cat_Productos_Problema_Troubleshooting");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Actualizado).HasColumnName("actualizado");

                entity.Property(e => e.Actualizadopor).HasColumnName("actualizadopor");

                entity.Property(e => e.Creado).HasColumnName("creado");

                entity.Property(e => e.Creadopor).HasColumnName("creadopor");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.Modelo).HasColumnName("modelo");

                entity.Property(e => e.Problema).HasColumnName("problema");
            });

            modelBuilder.Entity<CatProductosRespuestasTroubleshooting>(entity =>
            {
                entity.ToTable("Cat_Productos_Respuestas_Troubleshooting");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Actualizado).HasColumnName("actualizado");

                entity.Property(e => e.Actualizadopor).HasColumnName("actualizadopor");

                entity.Property(e => e.Creado).HasColumnName("creado");

                entity.Property(e => e.Creadopor).HasColumnName("creadopor");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.Falla).HasColumnName("falla");

                entity.Property(e => e.IdPregunta).HasColumnName("id_pregunta");

                entity.Property(e => e.Solucion).HasColumnName("solucion");
            });

            modelBuilder.Entity<CatReparacion>(entity =>
            {
                entity.ToTable("cat_reparacion");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DescReparacionEn).HasColumnName("desc_reparacion_en");

                entity.Property(e => e.DescReparacionEs).HasColumnName("desc_reparacion_es");

                entity.Property(e => e.Estatus).HasColumnName("estatus");
            });

            modelBuilder.Entity<CatRoles>(entity =>
            {
                entity.ToTable("Cat_Roles");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Rol).HasColumnName("rol");

                entity.Property(e => e.Siglas).HasColumnName("siglas");
            });

            modelBuilder.Entity<CatSolicitadoPor>(entity =>
            {
                entity.ToTable("Cat_solicitado_por");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DescSolicitadoPor).HasColumnName("desc_solicitado_por");

                entity.Property(e => e.Estatus).HasColumnName("estatus");
            });

            modelBuilder.Entity<CatSolicitudVia>(entity =>
            {
                entity.ToTable("Cat_solicitud_via");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DescSolicitudVia).HasColumnName("desc_solicitud_via");

                entity.Property(e => e.Estatus).HasColumnName("estatus");
            });

            modelBuilder.Entity<CatSubLineaProducto>(entity =>
            {
                entity.ToTable("Cat_SubLinea_Producto");

                entity.HasIndex(e => e.IdLineaProducto);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Descripcion).HasColumnName("descripcion");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.HpHoras).HasColumnName("hp_horas");

                entity.Property(e => e.IdLineaProducto).HasColumnName("id_linea_producto");

                entity.Property(e => e.ShowApp).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.IdLineaProductoNavigation)
                    .WithMany(p => p.CatSubLineaProducto)
                    .HasForeignKey(d => d.IdLineaProducto)
                    .HasConstraintName("ForeignKey_Cat_sublinea_cat_linea");
            });

            modelBuilder.Entity<CatSucursales>(entity =>
            {
                entity.ToTable("Cat_Sucursales");

                entity.HasIndex(e => e.IdCuenta);

                entity.Property(e => e.IdCuenta).HasColumnName("Id_Cuenta");

                entity.Property(e => e.MargenVendedores).HasColumnName("margen_vendedores");

                entity.Property(e => e.Tipo).HasColumnName("tipo");

                entity.Property(e => e.UrlLogo).HasColumnName("url_logo");

                entity.HasOne(d => d.IdCuentaNavigation)
                    .WithMany(p => p.CatSucursales)
                    .HasForeignKey(d => d.IdCuenta)
                    .HasConstraintName("ForeignKey_cuenta_Sucursal");
            });

            modelBuilder.Entity<CatSugeridosProducto>(entity =>
            {
                entity.ToTable("Cat_Sugeridos_Producto");

                entity.HasIndex(e => e.IdProducto);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.IdProducto).HasColumnName("id_producto");

                entity.Property(e => e.SkuSugerido).HasColumnName("sku_sugerido");

                entity.HasOne(d => d.IdProductoNavigation)
                    .WithMany(p => p.CatSugeridosProducto)
                    .HasForeignKey(d => d.IdProducto)
                    .HasConstraintName("ForeignKey_Sugeridos_Producto");
            });

            modelBuilder.Entity<CatSuperLineas>(entity =>
            {
                entity.ToTable("cat_SuperLineas");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Activo).HasColumnName("activo");

                entity.Property(e => e.Descripcion).HasColumnName("descripcion");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.Orden).HasColumnName("orden");
            });

            modelBuilder.Entity<CatTarjetas>(entity =>
            {
                entity.ToTable("cat_Tarjetas");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.Nombre).HasColumnName("nombre");
            });

            modelBuilder.Entity<CatTecnicosSubTipo>(entity =>
            {
                entity.ToTable("Cat_Tecnicos_Sub_Tipo");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdTipo).HasColumnName("id_tipo");

                entity.Property(e => e.SubDescTipo).HasColumnName("Sub_desc_tipo");
            });

            modelBuilder.Entity<CatTecnicosTipo>(entity =>
            {
                entity.ToTable("Cat_Tecnicos_Tipo");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DescTipo).HasColumnName("desc_tipo");
            });

            modelBuilder.Entity<CatTipoCondicion>(entity =>
            {
                entity.ToTable("cat_tipo_condicion");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.TipoCondicion).HasColumnName("tipo_condicion");
            });

            modelBuilder.Entity<CatTipoEntidades>(entity =>
            {
                entity.ToTable("cat_tipo_entidades");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.TipoEntidad).HasColumnName("tipo_entidad");
            });

            modelBuilder.Entity<CatTipoProductos>(entity =>
            {
                entity.ToTable("cat_tipo_productos");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Tipo).HasColumnName("tipo");
            });

            modelBuilder.Entity<CatTipoRefaccion>(entity =>
            {
                entity.ToTable("Cat_Tipo_Refaccion");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DescTipoRefaccion).HasColumnName("desc_tipo_refaccion");

                entity.Property(e => e.Estatus).HasColumnName("estatus");
            });

            modelBuilder.Entity<CatTipoServicio>(entity =>
            {
                entity.ToTable("Cat_tipo_servicio");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DescTipoServicio).HasColumnName("desc_tipo_servicio");

                entity.Property(e => e.Estatus).HasColumnName("estatus");
            });

            modelBuilder.Entity<CatTiposComisiones>(entity =>
            {
                entity.ToTable("cat_tipos_comisiones");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.TipoComision).HasColumnName("tipo_comision");
            });

            modelBuilder.Entity<CatTiposHerencia>(entity =>
            {
                entity.ToTable("cat_tipos_herencia");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Tipo).HasColumnName("tipo");
            });

            modelBuilder.Entity<CatUnidadesPorEquipo>(entity =>
            {
                entity.ToTable("cat_unidades_por_equipo");

                entity.HasIndex(e => e.Catpromocionid);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Catpromocionid).HasColumnName("catpromocionid");

                entity.Property(e => e.UnMaximoEquipo).HasColumnName("unMaximoEquipo");

                entity.Property(e => e.UnMaximoUnidad).HasColumnName("unMaximoUnidad");

                entity.Property(e => e.UnMinimoEquipo).HasColumnName("unMinimoEquipo");

                entity.Property(e => e.UnMinimoUnidad).HasColumnName("unMinimoUnidad");

                entity.HasOne(d => d.Catpromocion)
                    .WithMany(p => p.CatUnidadesPorEquipo)
                    .HasForeignKey(d => d.Catpromocionid);
            });

            modelBuilder.Entity<CerConsumibles>(entity =>
            {
                entity.ToTable("Cer_consumibles");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Consumible).HasColumnName("consumible");

                entity.Property(e => e.CostoUnitario)
                    .HasColumnName("costo_unitario")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<CerLabor>(entity =>
            {
                entity.ToTable("Cer_labor");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Anual)
                    .HasColumnName("anual")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CantidadEquipos).HasColumnName("cantidad_equipos");

                entity.Property(e => e.CostoBase)
                    .HasColumnName("costo_base")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CostoUnitario)
                    .HasColumnName("costo_unitario")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<CerProductoCarrito>(entity =>
            {
                entity.ToTable("Cer_producto_carrito");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Costo).HasColumnName("costo");

                entity.Property(e => e.Folio).HasColumnName("folio");

                entity.Property(e => e.IdCarrito).HasColumnName("id_carrito");

                entity.Property(e => e.IdLabor).HasColumnName("id_labor");

                entity.Property(e => e.IdViaticos).HasColumnName("id_viaticos");
            });

            modelBuilder.Entity<CerProductoCliente>(entity =>
            {
                entity.ToTable("Cer_producto_cliente");

                entity.HasIndex(e => e.Clientesid);

                entity.HasIndex(e => e.IdLabor);

                entity.HasIndex(e => e.IdViaticos);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Actualizado).HasColumnName("actualizado");

                entity.Property(e => e.Actualizadopor).HasColumnName("actualizadopor");

                entity.Property(e => e.Costo).HasColumnName("costo");

                entity.Property(e => e.Creado).HasColumnName("creado");

                entity.Property(e => e.Creadopor).HasColumnName("creadopor");

                entity.Property(e => e.EstatusVenta).HasColumnName("estatus_venta");

                entity.Property(e => e.Folio).HasColumnName("folio");

                entity.Property(e => e.IdCliente).HasColumnName("id_cliente");

                entity.Property(e => e.IdCotizacion)
                    .HasColumnName("id_cotizacion")
                    .HasDefaultValueSql("(CONVERT([bigint],(0)))");

                entity.Property(e => e.IdLabor).HasColumnName("id_labor");

                entity.Property(e => e.IdViaticos).HasColumnName("id_viaticos");

                entity.HasOne(d => d.Clientes)
                    .WithMany(p => p.CerProductoCliente)
                    .HasForeignKey(d => d.Clientesid);

                entity.HasOne(d => d.IdLaborNavigation)
                    .WithMany(p => p.CerProductoCliente)
                    .HasForeignKey(d => d.IdLabor)
                    .HasConstraintName("ForeignKey_Labor_Mantenimiento");

                entity.HasOne(d => d.IdViaticosNavigation)
                    .WithMany(p => p.CerProductoCliente)
                    .HasForeignKey(d => d.IdViaticos)
                    .HasConstraintName("ForeignKey_Viaticos_Mantenimiento");
            });

            modelBuilder.Entity<CerViaticos>(entity =>
            {
                entity.ToTable("Cer_viaticos");

                entity.HasIndex(e => e.IdCatLocalidad);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Anual)
                    .HasColumnName("anual")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CostoUnitario)
                    .HasColumnName("costo_unitario")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.IdCatLocalidad).HasColumnName("id_cat_localidad");

                entity.HasOne(d => d.IdCatLocalidadNavigation)
                    .WithMany(p => p.CerViaticos)
                    .HasForeignKey(d => d.IdCatLocalidad)
                    .HasConstraintName("ForeignKey_cat_localidad_viaticos");
            });

            modelBuilder.Entity<CheckListPreguntas>(entity =>
            {
                entity.ToTable("Check_List_Preguntas");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdCategoria).HasColumnName("id_categoria");

                entity.Property(e => e.Pregunta).HasColumnName("pregunta");

                entity.Property(e => e.PreguntaEn).HasColumnName("pregunta_en");
            });

            modelBuilder.Entity<CheckListRespuestas>(entity =>
            {
                entity.ToTable("Check_List_Respuestas");

                entity.HasIndex(e => e.IdProductoCheckListRespuestas);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comentarios).HasColumnName("comentarios");

                entity.Property(e => e.ComentariosEn).HasColumnName("comentarios_en");

                entity.Property(e => e.IdPregunta).HasColumnName("id_pregunta");

                entity.Property(e => e.IdProductoCheckListRespuestas).HasColumnName("id_producto_check_list_respuestas");

                entity.Property(e => e.Respuesta).HasColumnName("respuesta");

                entity.HasOne(d => d.IdProductoCheckListRespuestasNavigation)
                    .WithMany(p => p.CheckListRespuestas)
                    .HasForeignKey(d => d.IdProductoCheckListRespuestas)
                    .HasConstraintName("ForeignKey_Check_List_Respuestas");
            });

            modelBuilder.Entity<ClienteProductos>(entity =>
            {
                entity.ToTable("Cliente_Productos");

                entity.HasIndex(e => e.CatEstatusCompraId);

                entity.HasIndex(e => e.CatProductosid);

                entity.HasIndex(e => e.IdCliente);

                entity.Property(e => e.Actualizado).HasColumnName("actualizado");

                entity.Property(e => e.Actualizadopor).HasColumnName("actualizadopor");

                entity.Property(e => e.CatEstatusCompraId).HasColumnName("Cat_Estatus_CompraId");

                entity.Property(e => e.CatProductosid).HasColumnName("Cat_Productosid");

                entity.Property(e => e.Creado).HasColumnName("creado");

                entity.Property(e => e.Creadopor).HasColumnName("creadopor");

                entity.Property(e => e.Garantia).HasColumnName("garantia");

                entity.Property(e => e.IdCliente).HasColumnName("Id_Cliente");

                entity.Property(e => e.IdCotizacion).HasColumnName("id_cotizacion");

                entity.Property(e => e.IdEsatusCompra).HasColumnName("Id_EsatusCompra");

                entity.Property(e => e.IdProducto).HasColumnName("Id_Producto");

                entity.Property(e => e.IdVisita).HasColumnName("id_visita");

                entity.Property(e => e.NoProducto).HasColumnName("no_producto");

                entity.Property(e => e.NoSerie).HasColumnName("no_serie");

                entity.HasOne(d => d.CatEstatusCompra)
                    .WithMany(p => p.ClienteProductos)
                    .HasForeignKey(d => d.CatEstatusCompraId);

                entity.HasOne(d => d.CatProductos)
                    .WithMany(p => p.ClienteProductos)
                    .HasForeignKey(d => d.CatProductosid);

                entity.HasOne(d => d.IdClienteNavigation)
                    .WithMany(p => p.ClienteProductos)
                    .HasForeignKey(d => d.IdCliente)
                    .HasConstraintName("ForeignKey_Cliente_Producto");
            });

            modelBuilder.Entity<Clientes>(entity =>
            {
                entity.HasIndex(e => e.CatEstadoid);

                entity.HasIndex(e => e.CatMunicipioid);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Actualizado).HasColumnName("actualizado");

                entity.Property(e => e.Actualizadopor).HasColumnName("actualizadopor");

                entity.Property(e => e.CatEstadoid).HasColumnName("Cat_Estadoid");

                entity.Property(e => e.CatMunicipioid).HasColumnName("Cat_Municipioid");

                entity.Property(e => e.Creado).HasColumnName("creado");

                entity.Property(e => e.Creadopor).HasColumnName("creadopor");

                entity.Property(e => e.Email).HasColumnName("email");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.Folio).HasColumnName("folio");

                entity.Property(e => e.IdSucursal).HasColumnName("Id_sucursal");

                entity.Property(e => e.Materno).HasColumnName("materno");

                entity.Property(e => e.Nombre).HasColumnName("nombre");

                entity.Property(e => e.NombreComercial).HasColumnName("nombre_comercial");

                entity.Property(e => e.NombreContacto).HasColumnName("nombre_contacto");

                entity.Property(e => e.Paterno).HasColumnName("paterno");

                entity.Property(e => e.Referencias).HasColumnName("referencias");

                entity.Property(e => e.Referidopor).HasColumnName("referidopor");

                entity.Property(e => e.Telefono).HasColumnName("telefono");

                entity.Property(e => e.TelefonoMovil).HasColumnName("telefono_movil");

                entity.Property(e => e.TipoCliente).HasColumnName("tipo_cliente");

                entity.Property(e => e.TipoPersona).HasColumnName("tipo_persona");

                entity.Property(e => e.VigenciaRef).HasColumnName("vigencia_ref");

                entity.Property(e => e.VisibleTickets).HasColumnName("visible_tickets");

                entity.HasOne(d => d.CatEstado)
                    .WithMany(p => p.Clientes)
                    .HasForeignKey(d => d.CatEstadoid);

                entity.HasOne(d => d.CatMunicipio)
                    .WithMany(p => p.Clientes)
                    .HasForeignKey(d => d.CatMunicipioid);
            });

            modelBuilder.Entity<ComAfectacionCcs>(entity =>
            {
                entity.ToTable("com_afectacion_ccs");

                entity.HasIndex(e => e.IdComisionv);

                entity.HasIndex(e => e.IdCondionesComercialesSucursal);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdComisionv).HasColumnName("id_comisionv");

                entity.Property(e => e.IdCondionesComercialesSucursal).HasColumnName("id_condiones_comerciales_sucursal");

                entity.Property(e => e.Margen).HasColumnName("margen");

                entity.HasOne(d => d.IdComisionvNavigation)
                    .WithMany(p => p.ComAfectacionCcs)
                    .HasForeignKey(d => d.IdComisionv)
                    .HasConstraintName("ForeignKey_config_comision_afectacion");

                entity.HasOne(d => d.IdCondionesComercialesSucursalNavigation)
                    .WithMany(p => p.ComAfectacionCcs)
                    .HasForeignKey(d => d.IdCondionesComercialesSucursal)
                    .HasConstraintName("ForeignKey_comafectacioncc_condiones_comerciales_sucursal2");
            });

            modelBuilder.Entity<ComEntidadesParticipantes>(entity =>
            {
                entity.ToTable("com_entidades_participantes");

                entity.HasIndex(e => e.IdComisionv);

                entity.HasIndex(e => e.IdTipoEntidad);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdComisionv).HasColumnName("id_comisionv");

                entity.Property(e => e.IdEntidad).HasColumnName("id_entidad");

                entity.Property(e => e.IdTipoEntidad).HasColumnName("id_tipo_entidad");

                entity.HasOne(d => d.IdComisionvNavigation)
                    .WithMany(p => p.ComEntidadesParticipantes)
                    .HasForeignKey(d => d.IdComisionv)
                    .HasConstraintName("ForeignKey_config_comision_participantes");

                entity.HasOne(d => d.IdTipoEntidadNavigation)
                    .WithMany(p => p.ComEntidadesParticipantes)
                    .HasForeignKey(d => d.IdTipoEntidad)
                    .HasConstraintName("ForeignKey_comentidadesparticipantes_comcattipoentidades2");
            });

            modelBuilder.Entity<ComProductoPromocions>(entity =>
            {
                entity.ToTable("com_producto_promocions");

                entity.HasIndex(e => e.CatProductosid);

                entity.HasIndex(e => e.IdComisionv);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CatProductosid).HasColumnName("Cat_Productosid");

                entity.Property(e => e.IdComisionv).HasColumnName("id_comisionv");

                entity.Property(e => e.IdProducto).HasColumnName("id_producto");

                entity.HasOne(d => d.CatProductos)
                    .WithMany(p => p.ComProductoPromocions)
                    .HasForeignKey(d => d.CatProductosid);

                entity.HasOne(d => d.IdComisionvNavigation)
                    .WithMany(p => p.ComProductoPromocions)
                    .HasForeignKey(d => d.IdComisionv)
                    .HasConstraintName("ForeignKey_config_comision_productos_misiones_prom");
            });

            modelBuilder.Entity<ComProductosCondicions>(entity =>
            {
                entity.ToTable("com_productos_condicions");

                entity.HasIndex(e => e.IdComisionv);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cantidad).HasColumnName("cantidad");

                entity.Property(e => e.IdComisionv).HasColumnName("id_comisionv");

                entity.Property(e => e.IdProducto).HasColumnName("id_producto");

                entity.Property(e => e.IdTipoCategoria).HasColumnName("id_tipo_categoria");

                entity.HasOne(d => d.IdComisionvNavigation)
                    .WithMany(p => p.ComProductosCondicions)
                    .HasForeignKey(d => d.IdComisionv)
                    .HasConstraintName("ForeignKey_config_comision_productos_condicion");
            });

            modelBuilder.Entity<ComisionesPromoSublineaConfig>(entity =>
            {
                entity.ToTable("comisiones_promo_sublinea_config");

                entity.HasIndex(e => e.IdCcSucursal);

                entity.HasIndex(e => e.IdPromocion);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdCcSucursal).HasColumnName("id_cc_sucursal");

                entity.Property(e => e.IdPromocion).HasColumnName("id_promocion");

                entity.Property(e => e.Margen).HasColumnName("margen");

                entity.HasOne(d => d.IdCcSucursalNavigation)
                    .WithMany(p => p.ComisionesPromoSublineaConfig)
                    .HasForeignKey(d => d.IdCcSucursal)
                    .HasConstraintName("ForeignKey_comisiones_sublinea_config_cc_suc");

                entity.HasOne(d => d.IdPromocionNavigation)
                    .WithMany(p => p.ComisionesPromoSublineaConfig)
                    .HasForeignKey(d => d.IdPromocion)
                    .HasConstraintName("ForeignKey_Promocion_comisiones_sublinea_config");
            });

            modelBuilder.Entity<ComisionesSucursales>(entity =>
            {
                entity.ToTable("comisiones_sucursales");

                entity.HasIndex(e => e.IdCatTipoComision);

                entity.HasIndex(e => e.IdCotizacion);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.FechaDePago).HasColumnName("fecha_de_pago");

                entity.Property(e => e.FechaGeneracion).HasColumnName("fecha_generacion");

                entity.Property(e => e.IdCatTipoComision).HasColumnName("id_cat_tipo_comision");

                entity.Property(e => e.IdCotizacion).HasColumnName("id_cotizacion");

                entity.Property(e => e.IdQuienpago)
                    .HasColumnName("id_quienpago")
                    .HasDefaultValueSql("(CONVERT([bigint],(0)))");

                entity.Property(e => e.Pagada).HasColumnName("pagada");

                entity.Property(e => e.PagoProgramado).HasColumnName("pago_programado");

                entity.HasOne(d => d.IdCatTipoComisionNavigation)
                    .WithMany(p => p.ComisionesSucursales)
                    .HasForeignKey(d => d.IdCatTipoComision)
                    .HasConstraintName("ForeignKey_comisiones_sucursales_tipo_comisiones");

                entity.HasOne(d => d.IdCotizacionNavigation)
                    .WithMany(p => p.ComisionesSucursales)
                    .HasForeignKey(d => d.IdCotizacion)
                    .HasConstraintName("ForeignKey_comisiones_sucursales_cotizaciones");
            });

            modelBuilder.Entity<ComisionesVendedores>(entity =>
            {
                entity.ToTable("comisiones_vendedores");

                entity.HasIndex(e => e.IdCatTipoComision);

                entity.HasIndex(e => e.IdCotizacion);

                entity.HasIndex(e => e.IdQuienpago);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.FechaDePago).HasColumnName("fecha_de_pago");

                entity.Property(e => e.FechaGeneracion).HasColumnName("fecha_generacion");

                entity.Property(e => e.IdCatTipoComision).HasColumnName("id_cat_tipo_comision");

                entity.Property(e => e.IdCotizacion).HasColumnName("id_cotizacion");

                entity.Property(e => e.IdQuienpago)
                    .HasColumnName("id_quienpago")
                    .HasDefaultValueSql("(CONVERT([bigint],(0)))");

                entity.Property(e => e.MontoComSinIva)
                    .HasColumnName("monto_com_sin_iva")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MontoComision)
                    .HasColumnName("monto_comision")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Pagada).HasColumnName("pagada");

                entity.Property(e => e.PagoProgramado).HasColumnName("pago_programado");

                entity.HasOne(d => d.IdCatTipoComisionNavigation)
                    .WithMany(p => p.ComisionesVendedores)
                    .HasForeignKey(d => d.IdCatTipoComision)
                    .HasConstraintName("ForeignKey_comisiones_vendedores_tipo_comisiones");

                entity.HasOne(d => d.IdCotizacionNavigation)
                    .WithMany(p => p.ComisionesVendedores)
                    .HasForeignKey(d => d.IdCotizacion)
                    .HasConstraintName("ForeignKey_comisiones_vendedores_cotizaciones");

                entity.HasOne(d => d.IdQuienpagoNavigation)
                    .WithMany(p => p.ComisionesVendedores)
                    .HasForeignKey(d => d.IdQuienpago)
                    .HasConstraintName("ForeignKey_Users_comisiones_vendedoress");
            });

            modelBuilder.Entity<CondicionesComercialesCuenta>(entity =>
            {
                entity.ToTable("CondicionesComerciales_Cuenta");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdCondicion).HasColumnName("id_condicion");

                entity.Property(e => e.IdCuenta).HasColumnName("id_cuenta");

                entity.Property(e => e.VigenciaFinal).HasColumnName("Vigencia_final");

                entity.Property(e => e.VigenciaInicial).HasColumnName("Vigencia_inicial");
            });

            modelBuilder.Entity<CondionesComercialesSucursal>(entity =>
            {
                entity.ToTable("condiones_comerciales_sucursal");

                entity.HasIndex(e => e.IdCatSubLineaProducto);

                entity.HasIndex(e => e.IdCatSucursales);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdCatSubLineaProducto).HasColumnName("id_Cat_SubLinea_Producto");

                entity.Property(e => e.IdCatSucursales).HasColumnName("id_Cat_Sucursales");

                entity.Property(e => e.Margen).HasColumnName("margen");

                entity.HasOne(d => d.IdCatSubLineaProductoNavigation)
                    .WithMany(p => p.CondionesComercialesSucursal)
                    .HasForeignKey(d => d.IdCatSubLineaProducto)
                    .HasConstraintName("ForeignKey_condiones_comerciales_sucursal_sublinea");

                entity.HasOne(d => d.IdCatSucursalesNavigation)
                    .WithMany(p => p.CondionesComercialesSucursal)
                    .HasForeignKey(d => d.IdCatSucursales)
                    .HasConstraintName("ForeignKey_condiones_comerciales_sucursal_sucursales");
            });

            modelBuilder.Entity<ConfigComisiones>(entity =>
            {
                entity.ToTable("config_comisiones");

                entity.HasIndex(e => e.IdCatTipoCondicion);

                entity.HasIndex(e => e.IdTiposHerenciaPromo);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AplicaComision).HasColumnName("aplica_comision");

                entity.Property(e => e.FechaHoraFin).HasColumnName("fecha_hora_fin");

                entity.Property(e => e.FechaHoraInicio).HasColumnName("fecha_hora_inicio");

                entity.Property(e => e.IdCatTipoCondicion).HasColumnName("id_cat_tipo_condicion");

                entity.Property(e => e.IdTiposHerenciaPromo).HasColumnName("id_tipos_herencia_promo");

                entity.Property(e => e.MontoCondicion)
                    .HasColumnName("monto_condicion")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MontoSuperior)
                    .HasColumnName("monto_superior")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Nombre).HasColumnName("nombre");

                entity.Property(e => e.VigenciaIndefinida).HasColumnName("vigencia_indefinida");

                entity.HasOne(d => d.IdCatTipoCondicionNavigation)
                    .WithMany(p => p.ConfigComisiones)
                    .HasForeignKey(d => d.IdCatTipoCondicion)
                    .HasConstraintName("ForeignKey_config_comision_condicion");

                entity.HasOne(d => d.IdTiposHerenciaPromoNavigation)
                    .WithMany(p => p.ConfigComisiones)
                    .HasForeignKey(d => d.IdTiposHerenciaPromo)
                    .HasConstraintName("ForeignKey_config_comision_herencia");
            });

            modelBuilder.Entity<CotizacionMontoDescuento>(entity =>
            {
                entity.ToTable("cotizacion_monto_descuento");

                entity.HasIndex(e => e.IdCotizacion);

                entity.HasIndex(e => e.IdPromocion);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdCotizacion).HasColumnName("id_cotizacion");

                entity.Property(e => e.IdPromocion).HasColumnName("id_promocion");

                entity.Property(e => e.MontoDescConIva).HasColumnName("monto_desc_con_iva");

                entity.Property(e => e.MontoDescSinIva).HasColumnName("monto_desc_sin_iva");

                entity.HasOne(d => d.IdCotizacionNavigation)
                    .WithMany(p => p.CotizacionMontoDescuento)
                    .HasForeignKey(d => d.IdCotizacion)
                    .HasConstraintName("ForeignKey_cotizacion_monto_descuento_cotizacion");

                entity.HasOne(d => d.IdPromocionNavigation)
                    .WithMany(p => p.CotizacionMontoDescuento)
                    .HasForeignKey(d => d.IdPromocion)
                    .HasConstraintName("ForeignKey_cotizacion_monto_descuento_promocion");
            });

            modelBuilder.Entity<CotizacionProducto>(entity =>
            {
                entity.ToTable("Cotizacion_Producto");

                entity.HasIndex(e => e.IdCotizacion);

                entity.HasIndex(e => e.IdProducto);

                entity.Property(e => e.AgregadoAutomaticamente).HasColumnName("agregado_automaticamente");

                entity.Property(e => e.Cantidad).HasColumnName("cantidad");

                entity.Property(e => e.EsRegalo).HasColumnName("es_regalo");

                entity.Property(e => e.IdCotizacion).HasColumnName("Id_Cotizacion");

                entity.Property(e => e.IdProducto).HasColumnName("Id_Producto");

                entity.Property(e => e.IvaCondComerciales).HasColumnName("iva_cond_comerciales");

                entity.Property(e => e.IvaPrecioDescuento).HasColumnName("iva_precio_descuento");

                entity.Property(e => e.IvaPrecioLista).HasColumnName("iva_precio_lista");

                entity.Property(e => e.MargenCc).HasColumnName("margen_cc");

                entity.Property(e => e.PrecioCondicionesCom).HasColumnName("precio_condiciones_com");

                entity.Property(e => e.PrecioDescuento).HasColumnName("precio_descuento");

                entity.Property(e => e.PrecioLista).HasColumnName("precio_lista");

                entity.HasOne(d => d.IdCotizacionNavigation)
                    .WithMany(p => p.CotizacionProducto)
                    .HasForeignKey(d => d.IdCotizacion)
                    .HasConstraintName("ForeignKey_Cotizacion_Producto_cotiza");

                entity.HasOne(d => d.IdProductoNavigation)
                    .WithMany(p => p.CotizacionProducto)
                    .HasForeignKey(d => d.IdProducto)
                    .HasConstraintName("ForeignKey_Cotizacion_Producto_prod");
            });

            modelBuilder.Entity<CotizacionPromocion>(entity =>
            {
                entity.ToTable("Cotizacion_Promocion");

                entity.HasIndex(e => e.IdCotizacion);

                entity.HasIndex(e => e.IdPromocion);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdCotizacion).HasColumnName("id_cotizacion");

                entity.Property(e => e.IdPromocion).HasColumnName("id_promocion");

                entity.HasOne(d => d.IdCotizacionNavigation)
                    .WithMany(p => p.CotizacionPromocion)
                    .HasForeignKey(d => d.IdCotizacion)
                    .HasConstraintName("ForeignKey_producto_promocion_cotizacion");

                entity.HasOne(d => d.IdPromocionNavigation)
                    .WithMany(p => p.CotizacionPromocion)
                    .HasForeignKey(d => d.IdPromocion)
                    .HasConstraintName("ForeignKey_producto_promocion_promocion");
            });

            modelBuilder.Entity<Cotizaciones>(entity =>
            {
                entity.HasIndex(e => e.Clientesid);

                entity.HasIndex(e => e.IdCanal);

                entity.Property(e => e.AceptoTerminosCondiciones).HasColumnName("acepto_terminos_condiciones");

                entity.Property(e => e.CambioOrdCompGenerada).HasColumnName("cambio_ord_comp_generada");

                entity.Property(e => e.Cancelada).HasColumnName("cancelada");

                entity.Property(e => e.ComentCancel).HasColumnName("coment_cancel");

                entity.Property(e => e.ComisionSucrusal).HasColumnName("comision_sucrusal");

                entity.Property(e => e.ComisionVendedor).HasColumnName("comision_vendedor");

                entity.Property(e => e.Creadopor).HasColumnName("creadopor");

                entity.Property(e => e.DescuentoAcumulado).HasColumnName("descuento_acumulado");

                entity.Property(e => e.DescuentoAcumuladoCondCom).HasColumnName("descuento_acumulado_cond_com");

                entity.Property(e => e.EntregaSol).HasColumnName("entrega_sol");

                entity.Property(e => e.FechaCotiza).HasColumnName("fecha_cotiza");

                entity.Property(e => e.Ibs).HasColumnName("ibs");

                entity.Property(e => e.IdCanal).HasColumnName("Id_Canal");

                entity.Property(e => e.IdCliente).HasColumnName("Id_Cliente");

                entity.Property(e => e.IdCotizacionPadre).HasColumnName("id_cotizacion_padre");

                entity.Property(e => e.IdCuenta).HasColumnName("Id_Cuenta");

                entity.Property(e => e.IdEstadoInstalacion).HasColumnName("Id_Estado_Instalacion");

                entity.Property(e => e.IdFormapago).HasColumnName("id_formapago");

                entity.Property(e => e.IdSucursal).HasColumnName("Id_sucursal");

                entity.Property(e => e.IdTarjeta).HasColumnName("id_tarjeta");

                entity.Property(e => e.IdUserEntregaSol).HasColumnName("id_user_entrega_sol");

                entity.Property(e => e.IdVendedor).HasColumnName("Id_Vendedor");

                entity.Property(e => e.ImporteCondicionesCom).HasColumnName("importe_condiciones_com");

                entity.Property(e => e.ImportePrecioLista).HasColumnName("importe_precio_lista");

                entity.Property(e => e.ImportePromociones).HasColumnName("importe_promociones");

                entity.Property(e => e.IvaCondicionesCom).HasColumnName("iva_condiciones_com");

                entity.Property(e => e.IvaPrecioLista).HasColumnName("iva_precio_lista");

                entity.Property(e => e.IvaPromociones).HasColumnName("iva_promociones");

                entity.Property(e => e.MotivoRechazo).HasColumnName("motivo_rechazo");

                entity.Property(e => e.NumeroProductos).HasColumnName("numero_productos");

                entity.Property(e => e.PuedeSolicitarEnv).HasColumnName("puede_solicitar_env");

                entity.Property(e => e.Rechazada).HasColumnName("rechazada");

                entity.Property(e => e.Referencia).HasColumnName("referencia");

                entity.Property(e => e.RequiereFact).HasColumnName("requiere_fact");

                entity.Property(e => e.UsrModifico).HasColumnName("usr_modifico");

                entity.Property(e => e.VigenicaRef).HasColumnName("vigenica_ref");

                entity.HasOne(d => d.Clientes)
                    .WithMany(p => p.Cotizaciones)
                    .HasForeignKey(d => d.Clientesid);

                entity.HasOne(d => d.IdCanalNavigation)
                    .WithMany(p => p.Cotizaciones)
                    .HasForeignKey(d => d.IdCanal)
                    .HasConstraintName("ForeignKey_Cotizacion_Canal");
            });

            modelBuilder.Entity<DatosFiscales>(entity =>
            {
                entity.HasIndex(e => e.IdCliente);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CalleNumero).HasColumnName("calle_numero");

                entity.Property(e => e.Colonia).HasColumnName("colonia");

                entity.Property(e => e.Cp).HasColumnName("cp");

                entity.Property(e => e.Email).HasColumnName("email");

                entity.Property(e => e.ExtFact).HasColumnName("Ext_fact");

                entity.Property(e => e.IdCliente).HasColumnName("id_cliente");

                entity.Property(e => e.IdEstado).HasColumnName("id_estado");

                entity.Property(e => e.IdMunicipio).HasColumnName("id_municipio");

                entity.Property(e => e.IdPrefijoCalle).HasColumnName("id_prefijo_calle");

                entity.Property(e => e.IntFact).HasColumnName("Int_fact");

                entity.Property(e => e.NombreFact).HasColumnName("nombre_fact");

                entity.Property(e => e.RazonSocial).HasColumnName("razon_social");

                entity.Property(e => e.Rfc).HasColumnName("rfc");

                entity.Property(e => e.TelefonoFact).HasColumnName("telefono_fact");

                entity.HasOne(d => d.IdClienteNavigation)
                    .WithMany(p => p.DatosFiscales)
                    .HasForeignKey(d => d.IdCliente)
                    .HasConstraintName("ForeignKey_DatosFiscales_Cliente");
            });

            modelBuilder.Entity<DatosFiscalesCanales>(entity =>
            {
                entity.ToTable("DatosFiscales_Canales");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CalleNumero).HasColumnName("calle_numero");

                entity.Property(e => e.Colonia).HasColumnName("colonia");

                entity.Property(e => e.Cp).HasColumnName("cp");

                entity.Property(e => e.Email).HasColumnName("email");

                entity.Property(e => e.ExtFact).HasColumnName("Ext_fact");

                entity.Property(e => e.IdCanal).HasColumnName("id_canal");

                entity.Property(e => e.IdEstado).HasColumnName("id_estado");

                entity.Property(e => e.IdMunicipio).HasColumnName("id_municipio");

                entity.Property(e => e.IntFact).HasColumnName("Int_fact");

                entity.Property(e => e.NombreFact).HasColumnName("nombre_fact");

                entity.Property(e => e.RazonSocial).HasColumnName("razon_social");

                entity.Property(e => e.Rfc).HasColumnName("rfc");

                entity.Property(e => e.TelefonoFact).HasColumnName("telefono_fact");
            });

            modelBuilder.Entity<DatosFiscalesSucursales>(entity =>
            {
                entity.ToTable("DatosFiscales_Sucursales");

                entity.HasIndex(e => e.IdSucursal);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CalleNumero).HasColumnName("calle_numero");

                entity.Property(e => e.Colonia).HasColumnName("colonia");

                entity.Property(e => e.Cp).HasColumnName("cp");

                entity.Property(e => e.Email).HasColumnName("email");

                entity.Property(e => e.ExtFact).HasColumnName("Ext_fact");

                entity.Property(e => e.IdEstado).HasColumnName("id_estado");

                entity.Property(e => e.IdMunicipio).HasColumnName("id_municipio");

                entity.Property(e => e.IdSucursal).HasColumnName("id_Sucursal");

                entity.Property(e => e.IntFact).HasColumnName("Int_fact");

                entity.Property(e => e.NombreFact).HasColumnName("nombre_fact");

                entity.Property(e => e.RazonSocial).HasColumnName("razon_social");

                entity.Property(e => e.Rfc).HasColumnName("rfc");

                entity.Property(e => e.TelefonoFact).HasColumnName("telefono_fact");

                entity.HasOne(d => d.IdSucursalNavigation)
                    .WithMany(p => p.DatosFiscalesSucursales)
                    .HasForeignKey(d => d.IdSucursal)
                    .HasConstraintName("ForeignKey_DatosFiscales_Sucursales_datos_fiscales");
            });

            modelBuilder.Entity<DireccionesCliente>(entity =>
            {
                entity.ToTable("Direcciones_Cliente");

                entity.HasIndex(e => e.IdCliente);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Actualizado).HasColumnName("actualizado");

                entity.Property(e => e.Actualizadopor).HasColumnName("actualizadopor");

                entity.Property(e => e.CalleNumero).HasColumnName("calle_numero");

                entity.Property(e => e.Colonia).HasColumnName("colonia");

                entity.Property(e => e.Cp).HasColumnName("cp");

                entity.Property(e => e.Creado).HasColumnName("creado");

                entity.Property(e => e.Creadopor).HasColumnName("creadopor");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.FechaEstimada).HasColumnName("Fecha_Estimada");

                entity.Property(e => e.IdCliente).HasColumnName("id_cliente");

                entity.Property(e => e.IdEstado).HasColumnName("id_estado");

                entity.Property(e => e.IdLocalidad).HasColumnName("id_localidad");

                entity.Property(e => e.IdMunicipio).HasColumnName("id_municipio");

                entity.Property(e => e.IdPrefijoCalle).HasColumnName("id_prefijo_calle");

                entity.Property(e => e.Nombrecontacto).HasColumnName("nombrecontacto");

                entity.Property(e => e.NumExt).HasColumnName("numExt");

                entity.Property(e => e.NumInt).HasColumnName("numInt");

                entity.Property(e => e.Telefono).HasColumnName("telefono");

                entity.Property(e => e.TelefonoMovil).HasColumnName("telefono_movil");

                entity.Property(e => e.TipoDireccion).HasColumnName("tipo_direccion");

                entity.HasOne(d => d.IdClienteNavigation)
                    .WithMany(p => p.DireccionesCliente)
                    .HasForeignKey(d => d.IdCliente)
                    .HasConstraintName("ForeignKey_Direcciones_Clientes");
            });

            modelBuilder.Entity<DireccionesCotizacion>(entity =>
            {
                entity.ToTable("direcciones_cotizacion");

                entity.HasIndex(e => e.IdCotizacion);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Actualizado).HasColumnName("actualizado");

                entity.Property(e => e.Actualizadopor).HasColumnName("actualizadopor");

                entity.Property(e => e.CalleNumero).HasColumnName("calle_numero");

                entity.Property(e => e.Colonia).HasColumnName("colonia");

                entity.Property(e => e.Cp).HasColumnName("cp");

                entity.Property(e => e.Creado).HasColumnName("creado");

                entity.Property(e => e.Creadopor).HasColumnName("creadopor");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.FechaEstimada).HasColumnName("Fecha_Estimada");

                entity.Property(e => e.IdCotizacion).HasColumnName("id_cotizacion");

                entity.Property(e => e.IdEstado).HasColumnName("id_estado");

                entity.Property(e => e.IdLocalidad).HasColumnName("id_localidad");

                entity.Property(e => e.IdMunicipio).HasColumnName("id_municipio");

                entity.Property(e => e.IdPrefijoCalle).HasColumnName("id_prefijo_calle");

                entity.Property(e => e.Nombrecontacto).HasColumnName("nombrecontacto");

                entity.Property(e => e.NumExt).HasColumnName("numExt");

                entity.Property(e => e.NumInt).HasColumnName("numInt");

                entity.Property(e => e.Telefono).HasColumnName("telefono");

                entity.Property(e => e.TelefonoMovil).HasColumnName("telefono_movil");

                entity.Property(e => e.TipoDireccion).HasColumnName("tipo_direccion");

                entity.HasOne(d => d.IdCotizacionNavigation)
                    .WithMany(p => p.DireccionesCotizacion)
                    .HasForeignKey(d => d.IdCotizacion)
                    .HasConstraintName("ForeignKey_Direcciones_Cotizaciones");
            });

            modelBuilder.Entity<DocumentosCotizacion>(entity =>
            {
                entity.ToTable("documentos_cotizacion");

                entity.Property(e => e.FechaSubida).HasColumnName("fecha_subida");

                entity.Property(e => e.IdCotizacion).HasColumnName("Id_Cotizacion");

                entity.Property(e => e.IdFormaPago).HasColumnName("id_forma_pago");

                entity.Property(e => e.IdFoto).HasColumnName("Id_foto");

                entity.Property(e => e.IdTipoTipoPago).HasColumnName("id_tipo_tipo_pago");

                entity.Property(e => e.IdUser).HasColumnName("id_user");

                entity.Property(e => e.TipoDocto).HasColumnName("tipo_docto");
            });

            modelBuilder.Entity<EncuestaGeneral>(entity =>
            {
                entity.ToTable("encuesta_general");

                entity.HasIndex(e => e.IdServicio);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.EstatusActivo).HasColumnName("estatus_activo");

                entity.Property(e => e.EstatusEncuesta).HasColumnName("estatus_encuesta");

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                entity.Property(e => e.Folio).HasColumnName("folio");

                entity.Property(e => e.IdCliente).HasColumnName("id_cliente");

                entity.Property(e => e.IdServicio).HasColumnName("id_servicio");

                entity.Property(e => e.Intentos).HasColumnName("intentos");

                entity.Property(e => e.Pregunta1).HasColumnName("pregunta_1");

                entity.Property(e => e.Pregunta10).HasColumnName("pregunta_10");

                entity.Property(e => e.Pregunta11).HasColumnName("pregunta_11");

                entity.Property(e => e.Pregunta12).HasColumnName("pregunta_12");

                entity.Property(e => e.Pregunta13).HasColumnName("pregunta_13");

                entity.Property(e => e.Pregunta14).HasColumnName("pregunta_14");

                entity.Property(e => e.Pregunta15).HasColumnName("pregunta_15");

                entity.Property(e => e.Pregunta16).HasColumnName("pregunta_16");

                entity.Property(e => e.Pregunta2).HasColumnName("pregunta_2");

                entity.Property(e => e.Pregunta3).HasColumnName("pregunta_3");

                entity.Property(e => e.Pregunta4).HasColumnName("pregunta_4");

                entity.Property(e => e.Pregunta5).HasColumnName("pregunta_5");

                entity.Property(e => e.Pregunta6).HasColumnName("pregunta_6");

                entity.Property(e => e.Pregunta7).HasColumnName("pregunta_7");

                entity.Property(e => e.Pregunta8).HasColumnName("pregunta_8");

                entity.Property(e => e.Pregunta9).HasColumnName("pregunta_9");

                entity.HasOne(d => d.IdServicioNavigation)
                    .WithMany(p => p.EncuestaGeneral)
                    .HasForeignKey(d => d.IdServicio)
                    .HasConstraintName("ForeignKey_e_general_servicio");
            });

            modelBuilder.Entity<EncuestaQueja>(entity =>
            {
                entity.ToTable("encuesta_queja");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.EstatusActivo).HasColumnName("estatus_activo");

                entity.Property(e => e.EstatusEncuesta).HasColumnName("estatus_encuesta");

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                entity.Property(e => e.Folio).HasColumnName("folio");

                entity.Property(e => e.IdCliente).HasColumnName("id_cliente");

                entity.Property(e => e.IdQueja).HasColumnName("id_queja");

                entity.Property(e => e.Intentos).HasColumnName("intentos");

                entity.Property(e => e.Pregunta1).HasColumnName("pregunta_1");

                entity.Property(e => e.Pregunta10).HasColumnName("pregunta_10");

                entity.Property(e => e.Pregunta11).HasColumnName("pregunta_11");

                entity.Property(e => e.Pregunta2).HasColumnName("pregunta_2");

                entity.Property(e => e.Pregunta3).HasColumnName("pregunta_3");

                entity.Property(e => e.Pregunta4).HasColumnName("pregunta_4");

                entity.Property(e => e.Pregunta5).HasColumnName("pregunta_5");

                entity.Property(e => e.Pregunta6).HasColumnName("pregunta_6");

                entity.Property(e => e.Pregunta7).HasColumnName("pregunta_7");

                entity.Property(e => e.Pregunta8).HasColumnName("pregunta_8");

                entity.Property(e => e.Pregunta9).HasColumnName("pregunta_9");
            });

            modelBuilder.Entity<EntidadesExcluidas>(entity =>
            {
                entity.ToTable("entidades_excluidas");

                entity.HasIndex(e => e.IdPromocion);

                entity.HasIndex(e => e.IdTipoEntidad);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdEntidad).HasColumnName("id_entidad");

                entity.Property(e => e.IdPromocion).HasColumnName("id_promocion");

                entity.Property(e => e.IdTipoEntidad).HasColumnName("id_tipo_entidad");

                entity.HasOne(d => d.IdPromocionNavigation)
                    .WithMany(p => p.EntidadesExcluidas)
                    .HasForeignKey(d => d.IdPromocion)
                    .HasConstraintName("ForeignKey_4entidadesexcluidas_promocion2");

                entity.HasOne(d => d.IdTipoEntidadNavigation)
                    .WithMany(p => p.EntidadesExcluidas)
                    .HasForeignKey(d => d.IdTipoEntidad)
                    .HasConstraintName("ForeignKey_entidades_excluidas_cattipoentidades2");
            });

            modelBuilder.Entity<EntidadesObligatorias>(entity =>
            {
                entity.ToTable("entidades_obligatorias");

                entity.HasIndex(e => e.IdPromocion);

                entity.HasIndex(e => e.IdTipoEntidad);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdEntidad).HasColumnName("id_entidad");

                entity.Property(e => e.IdPromocion).HasColumnName("id_promocion");

                entity.Property(e => e.IdTipoEntidad).HasColumnName("id_tipo_entidad");

                entity.HasOne(d => d.IdPromocionNavigation)
                    .WithMany(p => p.EntidadesObligatorias)
                    .HasForeignKey(d => d.IdPromocion)
                    .HasConstraintName("ForeignKey_4entidadesobli_promocion2");

                entity.HasOne(d => d.IdTipoEntidadNavigation)
                    .WithMany(p => p.EntidadesObligatorias)
                    .HasForeignKey(d => d.IdTipoEntidad)
                    .HasConstraintName("ForeignKey_entidades_obligatorias_cattipoentidades2");
            });

            modelBuilder.Entity<EntidadesParticipantes>(entity =>
            {
                entity.ToTable("entidades_participantes");

                entity.HasIndex(e => e.IdPromocion);

                entity.HasIndex(e => e.IdTipoEntidad);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdEntidad).HasColumnName("id_entidad");

                entity.Property(e => e.IdPromocion).HasColumnName("id_promocion");

                entity.Property(e => e.IdTipoEntidad).HasColumnName("id_tipo_entidad");

                entity.HasOne(d => d.IdPromocionNavigation)
                    .WithMany(p => p.EntidadesParticipantes)
                    .HasForeignKey(d => d.IdPromocion)
                    .HasConstraintName("ForeignKey_3entidadesparticipantes_promocion2");

                entity.HasOne(d => d.IdTipoEntidadNavigation)
                    .WithMany(p => p.EntidadesParticipantes)
                    .HasForeignKey(d => d.IdTipoEntidad)
                    .HasConstraintName("ForeignKey_entidadesparticipantes_cattipoentidades2");
            });

            modelBuilder.Entity<FormasPagoTiposComprobantes>(entity =>
            {
                entity.ToTable("formas_pago_tipos_comprobantes");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdCatFormasPago).HasColumnName("id_Cat_Formas_Pago");

                entity.Property(e => e.IdTipoComprobantes).HasColumnName("id_tipo_comprobantes");
            });

            modelBuilder.Entity<HistorialEstatus>(entity =>
            {
                entity.ToTable("historial_estatus");

                entity.HasIndex(e => e.IdServicio);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Creado).HasColumnName("creado");

                entity.Property(e => e.Creadopor).HasColumnName("creadopor");

                entity.Property(e => e.EstatusFinal).HasColumnName("estatus_final");

                entity.Property(e => e.EstatusInicial).HasColumnName("estatus_inicial");

                entity.Property(e => e.IdServicio).HasColumnName("id_servicio");

                entity.HasOne(d => d.IdServicioNavigation)
                    .WithMany(p => p.HistorialEstatus)
                    .HasForeignKey(d => d.IdServicio)
                    .HasConstraintName("ForeignKey_Historial_Servicio");
            });

            modelBuilder.Entity<HomeProductoCliente>(entity =>
            {
                entity.ToTable("home_producto_cliente");

                entity.HasIndex(e => e.Clientesid);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Actualizado).HasColumnName("actualizado");

                entity.Property(e => e.Actualizadopor).HasColumnName("actualizadopor");

                entity.Property(e => e.Costo).HasColumnName("costo");

                entity.Property(e => e.Creado).HasColumnName("creado");

                entity.Property(e => e.Creadopor).HasColumnName("creadopor");

                entity.Property(e => e.EstatusActivo).HasColumnName("estatus_activo");

                entity.Property(e => e.EstatusVenta).HasColumnName("estatus_venta");

                entity.Property(e => e.Folio).HasColumnName("folio");

                entity.Property(e => e.Horas).HasColumnName("horas");

                entity.Property(e => e.IdCliente).HasColumnName("id_cliente");

                entity.Property(e => e.IdCotizacion).HasColumnName("id_cotizacion");

                entity.Property(e => e.IdProducto).HasColumnName("id_producto");

                entity.Property(e => e.NoVisitas).HasColumnName("no_visitas");

                entity.HasOne(d => d.Clientes)
                    .WithMany(p => p.HomeProductoCliente)
                    .HasForeignKey(d => d.Clientesid);
            });

            modelBuilder.Entity<HomeProductoEstados>(entity =>
            {
                entity.ToTable("home_Producto_Estados");

                entity.HasIndex(e => e.IdEstado);

                entity.HasIndex(e => e.IdProductoHome);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdEstado).HasColumnName("id_estado");

                entity.Property(e => e.IdProductoHome).HasColumnName("id_producto_home");

                entity.HasOne(d => d.IdEstadoNavigation)
                    .WithMany(p => p.HomeProductoEstados)
                    .HasForeignKey(d => d.IdEstado)
                    .HasConstraintName("ForeignKey_Estados_Home_Program");

                entity.HasOne(d => d.IdProductoHomeNavigation)
                    .WithMany(p => p.HomeProductoEstados)
                    .HasForeignKey(d => d.IdProductoHome)
                    .HasConstraintName("ForeignKey_Productos_Home_Estados");
            });

            modelBuilder.Entity<InformeParteRecibida>(entity =>
            {
                entity.ToTable("Informe_parte_recibida");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cantidad).HasColumnName("cantidad");

                entity.Property(e => e.IdProducto).HasColumnName("id_producto");

                entity.Property(e => e.IdVisita).HasColumnName("id_visita");

                entity.Property(e => e.NoMaterial).HasColumnName("no_material");
            });

            modelBuilder.Entity<LogRefacciones>(entity =>
            {
                entity.ToTable("Log_refacciones");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AlmacenEntrada).HasColumnName("almacen_entrada");

                entity.Property(e => e.AlmacenSalida).HasColumnName("almacen_salida");

                entity.Property(e => e.Cantidad).HasColumnName("cantidad");

                entity.Property(e => e.IdRefaccion).HasColumnName("id_refaccion");

                entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            });

            modelBuilder.Entity<Mensajes>(entity =>
            {
                entity.ToTable("mensajes");

                entity.HasIndex(e => e.MotivoId);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DetalleMsj).HasColumnName("detalle_msj");

                entity.Property(e => e.FechaMsj)
                    .HasColumnName("fecha_msj")
                    .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                entity.Property(e => e.MotivoId).HasColumnName("motivo_id");

                entity.Property(e => e.OrdenId).HasColumnName("orden_id");

                entity.Property(e => e.UsuarioId).HasColumnName("usuario_id");

                entity.HasOne(d => d.Motivo)
                    .WithMany(p => p.Mensajes)
                    .HasForeignKey(d => d.MotivoId)
                    .HasConstraintName("ForeignKey_Motivo_Mensajes");
            });

            modelBuilder.Entity<Notificaciones>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Creado).HasColumnName("creado");

                entity.Property(e => e.Creadopor).HasColumnName("creadopor");

                entity.Property(e => e.Descripcion).HasColumnName("descripcion");

                entity.Property(e => e.EstatusLeido).HasColumnName("estatus_leido");

                entity.Property(e => e.Evento).HasColumnName("evento");

                entity.Property(e => e.RolNotificado).HasColumnName("rol_notificado");

                entity.Property(e => e.Url).HasColumnName("url");
            });

            modelBuilder.Entity<NotificacionesComerciales>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cuerpo)
                    .HasColumnName("cuerpo")
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasColumnName("fecha")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Hora)
                    .HasColumnName("hora")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Titulo)
                    .HasColumnName("titulo")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Url)
                    .HasColumnName("url")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UrlImagen)
                    .HasColumnName("urlImagen")
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<NotificationApp>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NameEquipo)
                    .HasColumnName("nameEquipo")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Notification)
                    .HasColumnName("notification")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Token)
                    .IsRequired()
                    .HasColumnName("token")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UidEquipo)
                    .IsRequired()
                    .HasColumnName("uidEquipo")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.NotificationApp)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK__Notificat__userI__0371755F");
            });

            modelBuilder.Entity<ParametroArchivos>(entity =>
            {
                entity.ToTable("parametro_Archivos");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ColUno)
                    .HasColumnName("col_uno")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Funcion).HasColumnName("funcion");

                entity.Property(e => e.Ruta).HasColumnName("ruta");
            });

            modelBuilder.Entity<ParametroTerminosCondiciones>(entity =>
            {
                entity.ToTable("parametro_Terminos_Condiciones");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Funcion).HasColumnName("funcion");

                entity.Property(e => e.Ruta).HasColumnName("ruta");
            });

            modelBuilder.Entity<PermisosFlujoCotizacion>(entity =>
            {
                entity.ToTable("Permisos_Flujo_Cotizacion");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdCanal).HasColumnName("id_Canal");

                entity.Property(e => e.IdEstatusCotizacion).HasColumnName("id_estatus_cotizacion");

                entity.Property(e => e.IdRol).HasColumnName("id_rol");

                entity.Property(e => e.IdTabla).HasColumnName("id_tabla");

                entity.Property(e => e.Inhabilitado).HasColumnName("inhabilitado");

                entity.Property(e => e.Permiso).HasColumnName("permiso");

                entity.Property(e => e.Visible).HasColumnName("visible");
            });

            modelBuilder.Entity<PiezasRepuesto>(entity =>
            {
                entity.ToTable("Piezas_Repuesto");

                entity.HasIndex(e => e.IdRelServicioRefaccion);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cantidad).HasColumnName("cantidad");

                entity.Property(e => e.Comentarios).HasColumnName("comentarios");

                entity.Property(e => e.Garantia).HasColumnName("garantia");

                entity.Property(e => e.IdMaterial).HasColumnName("id_material");

                entity.Property(e => e.IdRelServicioRefaccion).HasColumnName("id_rel_servicio_refaccion");

                entity.Property(e => e.Llegada).HasColumnName("llegada");

                entity.Property(e => e.Solicitada).HasColumnName("solicitada");

                entity.HasOne(d => d.IdRelServicioRefaccionNavigation)
                    .WithMany(p => p.PiezasRepuesto)
                    .HasForeignKey(d => d.IdRelServicioRefaccion)
                    .HasConstraintName("ForeignKey_Piezas_Repuesto_Rel_Servicio_Producto");
            });

            modelBuilder.Entity<PiezasRepuestoTecnico>(entity =>
            {
                entity.ToTable("Piezas_Repuesto_Tecnico");

                entity.HasIndex(e => e.IdRelServicioRefaccion);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cantidad).HasColumnName("cantidad");

                entity.Property(e => e.IdMaterial).HasColumnName("id_material");

                entity.Property(e => e.IdRelServicioRefaccion).HasColumnName("id_rel_servicio_refaccion");

                entity.Property(e => e.TipoRefaccion).HasColumnName("tipo_refaccion");

                entity.HasOne(d => d.IdRelServicioRefaccionNavigation)
                    .WithMany(p => p.PiezasRepuestoTecnico)
                    .HasForeignKey(d => d.IdRelServicioRefaccion)
                    .HasConstraintName("ForeignKey_Piezas_Repuesto_Tecnico_Rel_Servicio_Producto");
            });

            modelBuilder.Entity<Prediagnostico>(entity =>
            {
                entity.HasIndex(e => e.Visitaid);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdVisita).HasColumnName("id_visita");

                entity.Property(e => e.Observaciones).HasColumnName("observaciones");

                entity.Property(e => e.Visitaid).HasColumnName("visitaid");

                entity.HasOne(d => d.Visita)
                    .WithMany(p => p.Prediagnostico)
                    .HasForeignKey(d => d.Visitaid);
            });

            modelBuilder.Entity<PrediagnosticoRefacciones>(entity =>
            {
                entity.ToTable("Prediagnostico_Refacciones");

                entity.HasIndex(e => e.IdPrediagnostico);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cantidad).HasColumnName("cantidad");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.Garantia).HasColumnName("garantia");

                entity.Property(e => e.IdMaterial).HasColumnName("id_material");

                entity.Property(e => e.IdPrediagnostico).HasColumnName("id_prediagnostico");

                entity.Property(e => e.NumeroIr).HasColumnName("numero_ir");

                entity.HasOne(d => d.IdPrediagnosticoNavigation)
                    .WithMany(p => p.PrediagnosticoRefacciones)
                    .HasForeignKey(d => d.IdPrediagnostico)
                    .HasConstraintName("ForeignKey_Prediagnostico_Refacciones");
            });

            modelBuilder.Entity<ProductoCertificadoSublinea>(entity =>
            {
                entity.ToTable("producto_certificado_sublinea");

                entity.Property(e => e.IdProducto).HasColumnName("id_producto");

                entity.Property(e => e.IdSublinea).HasColumnName("Id_sublinea");
            });

            modelBuilder.Entity<ProductoCheckListRespuestas>(entity =>
            {
                entity.ToTable("Producto_Check_List_Respuestas");

                entity.HasIndex(e => e.IdVista);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.IdProducto).HasColumnName("id_producto");

                entity.Property(e => e.IdVista).HasColumnName("id_vista");

                entity.HasOne(d => d.IdVistaNavigation)
                    .WithMany(p => p.ProductoCheckListRespuestas)
                    .HasForeignKey(d => d.IdVista)
                    .HasConstraintName("ForeignKey_Producto_Check_List_Respuestas");
            });

            modelBuilder.Entity<ProductoPromocion>(entity =>
            {
                entity.ToTable("Producto_Promocion");

                entity.HasIndex(e => e.IdCotizacion);

                entity.HasIndex(e => e.IdProducto);

                entity.HasIndex(e => e.IdPromocion);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdCotizacion).HasColumnName("id_cotizacion");

                entity.Property(e => e.IdProducto).HasColumnName("id_producto");

                entity.Property(e => e.IdPromocion).HasColumnName("id_promocion");

                entity.HasOne(d => d.IdCotizacionNavigation)
                    .WithMany(p => p.ProductoPromocion)
                    .HasForeignKey(d => d.IdCotizacion)
                    .HasConstraintName("ForeignKey_producto_promocion_cotizaciones");

                entity.HasOne(d => d.IdProductoNavigation)
                    .WithMany(p => p.ProductoPromocion)
                    .HasForeignKey(d => d.IdProducto)
                    .HasConstraintName("ForeignKey_producto_promocion_cat_productos");

                entity.HasOne(d => d.IdPromocionNavigation)
                    .WithMany(p => p.ProductoPromocion)
                    .HasForeignKey(d => d.IdPromocion)
                    .HasConstraintName("ForeignKey_producto_promocion_promociones");
            });

            modelBuilder.Entity<ProductosCarrito>(entity =>
            {
                entity.ToTable("Productos_Carrito");

                entity.HasIndex(e => e.IdProducto);

                entity.Property(e => e.AgregadoAutomaticamente).HasColumnName("agregado_automaticamente");

                entity.Property(e => e.Cantidad).HasColumnName("cantidad");

                entity.Property(e => e.EsRegalo).HasColumnName("es_regalo");

                entity.Property(e => e.FechaCreacion).HasColumnName("fecha_creacion");

                entity.Property(e => e.IdProducto).HasColumnName("Id_Producto");

                entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");

                entity.Property(e => e.IvaCondComerciales).HasColumnName("iva_cond_comerciales");

                entity.Property(e => e.IvaPrecioDescuento).HasColumnName("iva_precio_descuento");

                entity.Property(e => e.IvaPrecioLista).HasColumnName("iva_precio_lista");

                entity.Property(e => e.MargenCc).HasColumnName("margen_cc");

                entity.Property(e => e.PrecioCondicionesCom).HasColumnName("precio_condiciones_com");

                entity.Property(e => e.PrecioDescuento).HasColumnName("precio_descuento");

                entity.Property(e => e.PrecioLista).HasColumnName("precio_lista");

                entity.HasOne(d => d.IdProductoNavigation)
                    .WithMany(p => p.ProductosCarrito)
                    .HasForeignKey(d => d.IdProducto)
                    .HasConstraintName("ForeignKey_Carritos_productos");
            });

            modelBuilder.Entity<ProductosCondicion>(entity =>
            {
                entity.ToTable("productos_condicion");

                entity.HasIndex(e => e.IdPromocion);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cantidad).HasColumnName("cantidad");

                entity.Property(e => e.IdProducto).HasColumnName("id_producto");

                entity.Property(e => e.IdPromocion).HasColumnName("id_promocion");

                entity.Property(e => e.IdTipoCategoria).HasColumnName("id_tipo_categoria");

                entity.HasOne(d => d.IdPromocionNavigation)
                    .WithMany(p => p.ProductosCondicion)
                    .HasForeignKey(d => d.IdPromocion)
                    .HasConstraintName("ForeignKey_5productoscondicion_promocion2");
            });

            modelBuilder.Entity<ProductosExcluidos>(entity =>
            {
                entity.ToTable("productos_excluidos");

                entity.HasIndex(e => e.IdPromocion);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdProducto).HasColumnName("id_producto");

                entity.Property(e => e.IdPromocion).HasColumnName("id_promocion");

                entity.Property(e => e.IdTipoCategoria).HasColumnName("id_tipo_categoria");

                entity.HasOne(d => d.IdPromocionNavigation)
                    .WithMany(p => p.ProductosExcluidos)
                    .HasForeignKey(d => d.IdPromocion)
                    .HasConstraintName("ForeignKey_5productos_excluidos_promocion2");
            });

            modelBuilder.Entity<ProductosQuejas>(entity =>
            {
                entity.HasKey(e => new { e.ProductoId, e.QuejaId });

                entity.HasIndex(e => e.QuejaId);

                entity.HasOne(d => d.Producto)
                    .WithMany(p => p.ProductosQuejas)
                    .HasForeignKey(d => d.ProductoId);

                entity.HasOne(d => d.Queja)
                    .WithMany(p => p.ProductosQuejas)
                    .HasForeignKey(d => d.QuejaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductosQuejas_Quejas");
            });

            modelBuilder.Entity<ProductosRelacionados>(entity =>
            {
                entity.ToTable("productos_relacionados");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdProducto).HasColumnName("id_producto");

                entity.Property(e => e.IdProducto2).HasColumnName("id_producto_2");
            });

            modelBuilder.Entity<Promocion>(entity =>
            {
                entity.ToTable("promocion");

                entity.HasIndex(e => e.IdCatTipoCondicion);

                entity.HasIndex(e => e.IdTiposHerenciaPromo);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AplicaCc).HasColumnName("aplica_cc");

                entity.Property(e => e.AplicaComisionConfig).HasColumnName("aplica_comision_config");

                entity.Property(e => e.BeneficioObligatorio).HasColumnName("beneficio_obligatorio");

                entity.Property(e => e.FechaHoraFin).HasColumnName("fecha_hora_fin");

                entity.Property(e => e.FechaHoraInicio).HasColumnName("fecha_hora_inicio");

                entity.Property(e => e.IdCatTipoCondicion).HasColumnName("id_cat_tipo_condicion");

                entity.Property(e => e.IdTipoBeneficio).HasColumnName("id_tipo_beneficio");

                entity.Property(e => e.IdTiposHerenciaPromo).HasColumnName("id_tipos_herencia_promo");

                entity.Property(e => e.IncluirDescAdic).HasColumnName("incluir_desc_adic");

                entity.Property(e => e.MontoCondicion)
                    .HasColumnName("monto_condicion")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MontoInferiorCondicion)
                    .HasColumnName("monto_inferior_condicion")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Nombre).HasColumnName("nombre");

                entity.Property(e => e.VigenciaIndefinida).HasColumnName("vigencia_indefinida");

                entity.HasOne(d => d.IdCatTipoCondicionNavigation)
                    .WithMany(p => p.Promocion)
                    .HasForeignKey(d => d.IdCatTipoCondicion)
                    .HasConstraintName("ForeignKey_2promocion_condicion2");

                entity.HasOne(d => d.IdTiposHerenciaPromoNavigation)
                    .WithMany(p => p.Promocion)
                    .HasForeignKey(d => d.IdTiposHerenciaPromo)
                    .HasConstraintName("ForeignKey_1promocion_herencia2");
            });

            modelBuilder.Entity<PromocionesCompatibles>(entity =>
            {
                entity.ToTable("promociones_compatibles");

                entity.HasIndex(e => e.IdPromocion);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdPromocion).HasColumnName("id_promocion");

                entity.Property(e => e.IdPromocion2).HasColumnName("id_promocion_2");

                entity.HasOne(d => d.IdPromocionNavigation)
                    .WithMany(p => p.PromocionesCompatibles)
                    .HasForeignKey(d => d.IdPromocion)
                    .HasConstraintName("ForeignKey_5promocompatibles1_promocion2");
            });

            modelBuilder.Entity<Propuestas>(entity =>
            {
                entity.HasIndex(e => e.QuejaId);

                entity.Property(e => e.Solucion).IsRequired();

                entity.HasOne(d => d.Queja)
                    .WithMany(p => p.Propuestas)
                    .HasForeignKey(d => d.QuejaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Propuestas_Quejas");
            });

            modelBuilder.Entity<Quejas>(entity =>
            {
                entity.HasIndex(e => e.CanalId);

                entity.HasIndex(e => e.ClienteId);

                entity.HasIndex(e => e.TipoQuejaId);

                entity.Property(e => e.Folio).IsRequired();

                entity.HasOne(d => d.Canal)
                    .WithMany(p => p.Quejas)
                    .HasForeignKey(d => d.CanalId);

                entity.HasOne(d => d.Cliente)
                    .WithMany(p => p.Quejas)
                    .HasForeignKey(d => d.ClienteId);

                entity.HasOne(d => d.TipoQueja)
                    .WithMany(p => p.Quejas)
                    .HasForeignKey(d => d.TipoQuejaId);
            });

            modelBuilder.Entity<QuejasServicios>(entity =>
            {
                entity.ToTable("quejas_servicios");

                entity.HasIndex(e => e.IdServicio);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdQueja).HasColumnName("id_queja");

                entity.Property(e => e.IdServicio).HasColumnName("id_servicio");

                entity.HasOne(d => d.IdServicioNavigation)
                    .WithMany(p => p.QuejasServicios)
                    .HasForeignKey(d => d.IdServicio)
                    .HasConstraintName("ForeignKey_Servicio_Queja");
            });

            modelBuilder.Entity<RelCategoriaProductoTipoProducto>(entity =>
            {
                entity.ToTable("Rel_Categoria_Producto_Tipo_Producto");

                entity.HasIndex(e => e.IdCategoria);

                entity.HasIndex(e => e.IdTipoServicio);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.HorasTecnicos).HasColumnName("horas_tecnicos");

                entity.Property(e => e.IdCategoria).HasColumnName("id_categoria");

                entity.Property(e => e.IdTipoServicio).HasColumnName("id_tipo_servicio");

                entity.Property(e => e.NoTecnicos).HasColumnName("no_tecnicos");

                entity.Property(e => e.PrecioHoraTecnico).HasColumnName("precio_hora_tecnico");

                entity.Property(e => e.PrecioVisita).HasColumnName("precio_visita");

                entity.Property(e => e.Viaticos)
                    .HasColumnName("viaticos")
                    .HasColumnType("decimal(18, 0)");

                entity.HasOne(d => d.IdCategoriaNavigation)
                    .WithMany(p => p.RelCategoriaProductoTipoProducto)
                    .HasForeignKey(d => d.IdCategoria)
                    .HasConstraintName("ForeignKey_Categoria_Producto_Rel");

                entity.HasOne(d => d.IdTipoServicioNavigation)
                    .WithMany(p => p.RelCategoriaProductoTipoProducto)
                    .HasForeignKey(d => d.IdTipoServicio)
                    .HasConstraintName("ForeignKey_Categoria_Producto_Rel_Tipo_Servicio");
            });

            modelBuilder.Entity<RelCertificadoCarrito>(entity =>
            {
                entity.ToTable("rel_certificado_carrito");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.EstatusActivo).HasColumnName("estatus_activo");

                entity.Property(e => e.IdCarrito).HasColumnName("id_carrito");

                entity.Property(e => e.IdProducto).HasColumnName("id_producto");

                entity.Property(e => e.IdSubLinea).HasColumnName("id_sub_linea");

                entity.Property(e => e.NoVisitas).HasColumnName("no_visitas");
            });

            modelBuilder.Entity<RelCertificadoProducto>(entity =>
            {
                entity.ToTable("rel_certificado_producto");

                entity.HasIndex(e => e.IdCertificado);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Creado)
                    .HasColumnName("creado")
                    .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                entity.Property(e => e.EstatusActivo).HasColumnName("estatus_activo");

                entity.Property(e => e.FechaVisita1)
                    .HasColumnName("fecha_visita_1")
                    .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                entity.Property(e => e.FechaVisita2)
                    .HasColumnName("fecha_visita_2")
                    .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                entity.Property(e => e.IdCertificado).HasColumnName("id_certificado");

                entity.Property(e => e.IdProducto).HasColumnName("id_producto");

                entity.Property(e => e.IdSubLinea).HasColumnName("id_sub_linea");

                entity.Property(e => e.NoVisitas).HasColumnName("no_visitas");

                entity.HasOne(d => d.IdCertificadoNavigation)
                    .WithMany(p => p.RelCertificadoProducto)
                    .HasForeignKey(d => d.IdCertificado)
                    .HasConstraintName("ForeignKey_Producto_Cer_Mantenimiento");
            });

            modelBuilder.Entity<RelCertificadoProductoConsumibles>(entity =>
            {
                entity.ToTable("rel_certificado_producto_consumibles");

                entity.HasIndex(e => e.IdConsumible);

                entity.HasIndex(e => e.IdRelCertificadoProducto);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdConsumible).HasColumnName("id_consumible");

                entity.Property(e => e.IdRelCertificadoProducto).HasColumnName("id_rel_certificado_producto");

                entity.HasOne(d => d.IdConsumibleNavigation)
                    .WithMany(p => p.RelCertificadoProductoConsumibles)
                    .HasForeignKey(d => d.IdConsumible)
                    .HasConstraintName("ForeignKey_Consumible_Mantenimiento");

                entity.HasOne(d => d.IdRelCertificadoProductoNavigation)
                    .WithMany(p => p.RelCertificadoProductoConsumibles)
                    .HasForeignKey(d => d.IdRelCertificadoProducto)
                    .HasConstraintName("ForeignKey_Prodcuto_cer_Mantenimiento");
            });

            modelBuilder.Entity<RelConsumibleSublinea>(entity =>
            {
                entity.ToTable("rel_consumible_sublinea");

                entity.HasIndex(e => e.IdConsumible);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdConsumible).HasColumnName("id_consumible");

                entity.Property(e => e.IdSublinea).HasColumnName("id_sublinea");

                entity.HasOne(d => d.IdConsumibleNavigation)
                    .WithMany(p => p.RelConsumibleSublinea)
                    .HasForeignKey(d => d.IdConsumible)
                    .HasConstraintName("ForeignKey_rel_consumible_sublinea");
            });

            modelBuilder.Entity<RelHomepProductos>(entity =>
            {
                entity.ToTable("rel_homep_productos");

                entity.HasIndex(e => e.IdHomep);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cantidad).HasColumnName("cantidad");

                entity.Property(e => e.Creado).HasColumnName("creado");

                entity.Property(e => e.EstatusActivo).HasColumnName("estatus_activo");

                entity.Property(e => e.FechaVisita1).HasColumnName("fecha_visita_1");

                entity.Property(e => e.FechaVisita2).HasColumnName("fecha_visita_2");

                entity.Property(e => e.IdHomep).HasColumnName("id_homep");

                entity.Property(e => e.IdProducto).HasColumnName("id_producto");

                entity.Property(e => e.IdSubLinea).HasColumnName("id_sub_linea");

                entity.HasOne(d => d.IdHomepNavigation)
                    .WithMany(p => p.RelHomepProductos)
                    .HasForeignKey(d => d.IdHomep)
                    .HasConstraintName("ForeignKey_rel_hpp_productos_cliente");
            });

            modelBuilder.Entity<RelImagenProductoVisita>(entity =>
            {
                entity.ToTable("Rel_Imagen_Producto_Visita");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Actividad).HasColumnName("actividad");

                entity.Property(e => e.Checklist).HasColumnName("checklist");

                entity.Property(e => e.Creado).HasColumnName("creado");

                entity.Property(e => e.Creadopor).HasColumnName("creadopor");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.IdProducto).HasColumnName("id_producto");

                entity.Property(e => e.IdVisita).HasColumnName("id_visita");

                entity.Property(e => e.Path).HasColumnName("path");
            });

            modelBuilder.Entity<RelServicioCategoriaApp>(entity =>
            {
                entity.ToTable("Rel_Servicio_Categoria_App");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cantidad).HasColumnName("cantidad");

                entity.Property(e => e.IdServicio).HasColumnName("id_Servicio");

                entity.Property(e => e.IdSubLinea).HasColumnName("id_SubLinea");

                entity.Property(e => e.IdVisita).HasColumnName("id_Visita");

                entity.HasOne(d => d.IdServicioNavigation)
                    .WithMany(p => p.RelServicioCategoriaApp)
                    .HasForeignKey(d => d.IdServicio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Rel_Servi__id_Se__69B1A35C");

                entity.HasOne(d => d.IdSubLineaNavigation)
                    .WithMany(p => p.RelServicioCategoriaApp)
                    .HasForeignKey(d => d.IdSubLinea)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Rel_Servi__id_Su__6B99EBCE");

                entity.HasOne(d => d.IdVisitaNavigation)
                    .WithMany(p => p.RelServicioCategoriaApp)
                    .HasForeignKey(d => d.IdVisita)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Rel_Servi__id_Vi__6AA5C795");
            });

            modelBuilder.Entity<RelServicioProducto>(entity =>
            {
                entity.ToTable("Rel_servicio_producto");

                entity.HasIndex(e => e.IdVista);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DescripcionCierre).HasColumnName("descripcion_cierre");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.Garantia).HasColumnName("garantia");

                entity.Property(e => e.IdCategoria).HasColumnName("id_categoria");

                entity.Property(e => e.IdProducto).HasColumnName("id_producto");

                entity.Property(e => e.IdVista).HasColumnName("id_vista");

                entity.Property(e => e.NoSerie).HasColumnName("no_serie");

                entity.Property(e => e.PrimeraVisita).HasColumnName("primera_visita");

                entity.Property(e => e.Reparacion).HasColumnName("reparacion");

                entity.HasOne(d => d.IdVistaNavigation)
                    .WithMany(p => p.RelServicioProducto)
                    .HasForeignKey(d => d.IdVista)
                    .HasConstraintName("ForeignKey_Rel_Servicio_Producto");
            });

            modelBuilder.Entity<RelServicioRefaccion>(entity =>
            {
                entity.ToTable("Rel_servicio_Refaccion");

                entity.HasIndex(e => e.IdVista);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Actividades).HasColumnName("actividades");

                entity.Property(e => e.Comentarios).HasColumnName("comentarios");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.Fallas).HasColumnName("fallas");

                entity.Property(e => e.IdProducto).HasColumnName("id_producto");

                entity.Property(e => e.IdVista).HasColumnName("id_vista");

                entity.HasOne(d => d.IdVistaNavigation)
                    .WithMany(p => p.RelServicioRefaccion)
                    .HasForeignKey(d => d.IdVista)
                    .HasConstraintName("ForeignKey_Rel_Servicio_Refaccion");
            });

            modelBuilder.Entity<RelTecnicoVisita>(entity =>
            {
                entity.ToTable("rel_tecnico_visita");

                entity.HasIndex(e => e.IdTecnico);

                entity.HasIndex(e => e.IdVista);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdTecnico).HasColumnName("id_tecnico");

                entity.Property(e => e.IdVista).HasColumnName("id_vista");

                entity.Property(e => e.TecnicoResponsable).HasColumnName("tecnico_responsable");

                entity.HasOne(d => d.IdTecnicoNavigation)
                    .WithMany(p => p.RelTecnicoVisita)
                    .HasForeignKey(d => d.IdTecnico)
                    .HasConstraintName("ForeignKey_Tecnico_Visita");

                entity.HasOne(d => d.IdVistaNavigation)
                    .WithMany(p => p.RelTecnicoVisita)
                    .HasForeignKey(d => d.IdVista)
                    .HasConstraintName("ForeignKey_Visita_Tecnico");
            });

            modelBuilder.Entity<RelTecnicoVisitaApp>(entity =>
            {
                entity.ToTable("rel_tecnico_visita_app");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdTecnico).HasColumnName("id_tecnico");

                entity.Property(e => e.IdVista).HasColumnName("id_vista");

                entity.Property(e => e.TecnicoResponsable).HasColumnName("tecnico_responsable");

                entity.HasOne(d => d.IdTecnicoNavigation)
                    .WithMany(p => p.RelTecnicoVisitaApp)
                    .HasForeignKey(d => d.IdTecnico)
                    .HasConstraintName("ForeignKey_Tecnico_Visita_app");

                entity.HasOne(d => d.IdVistaNavigation)
                    .WithMany(p => p.RelTecnicoVisitaApp)
                    .HasForeignKey(d => d.IdVista)
                    .HasConstraintName("ForeignKey_Visita_Tecnico_app");
            });

            modelBuilder.Entity<RelUserUserApp>(entity =>
            {
                entity.ToTable("rel_User_UserApp");

                entity.Property(e => e.IdClient).HasColumnName("idClient");

                entity.Property(e => e.IdClientApp).HasColumnName("idClientApp");
            });

            modelBuilder.Entity<Servicio>(entity =>
            {
                entity.HasIndex(e => e.CatCategoriaServicioid);

                entity.HasIndex(e => e.CatEstatusServicioid);

                entity.HasIndex(e => e.IdCliente);

                entity.HasIndex(e => e.IdSolicitadoPor);

                entity.HasIndex(e => e.IdSolicitudVia);

                entity.HasIndex(e => e.IdTipoServicio);

                entity.HasIndex(e => e.SubTipoServicioid);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ActivarCredito).HasColumnName("activar_credito");

                entity.Property(e => e.Actualizado).HasColumnName("actualizado");

                entity.Property(e => e.Actualizadopor).HasColumnName("actualizadopor");

                entity.Property(e => e.AppService).HasColumnName("appService");

                entity.Property(e => e.CatCategoriaServicioid).HasColumnName("Cat_Categoria_Servicioid");

                entity.Property(e => e.CatEstatusServicioid).HasColumnName("Cat_estatus_servicioid");

                entity.Property(e => e.Contacto).HasColumnName("contacto");

                entity.Property(e => e.Creado).HasColumnName("creado");

                entity.Property(e => e.Creadopor).HasColumnName("creadopor");

                entity.Property(e => e.DescripcionActividades).HasColumnName("descripcion_actividades");

                entity.Property(e => e.Encuesta)
                    .HasColumnName("encuesta")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FechaServicio).HasColumnName("fecha_servicio");

                entity.Property(e => e.Ibs).HasColumnName("IBS");

                entity.Property(e => e.IdCategoriaServicio).HasColumnName("id_categoria_servicio");

                entity.Property(e => e.IdCliente).HasColumnName("id_cliente");

                entity.Property(e => e.IdDistribuidorAutorizado).HasColumnName("id_distribuidor_autorizado");

                entity.Property(e => e.IdEstatusServicio).HasColumnName("id_estatus_servicio");

                entity.Property(e => e.IdMotivoCierre).HasColumnName("id_motivo_cierre");

                entity.Property(e => e.IdSolicitadoPor).HasColumnName("id_solicitado_por");

                entity.Property(e => e.IdSolicitudVia).HasColumnName("id_solicitud_via");

                entity.Property(e => e.IdSubTipoServicio).HasColumnName("id_sub_tipo_servicio");

                entity.Property(e => e.IdTipoServicio).HasColumnName("id_tipo_servicio");

                entity.Property(e => e.NoServicio).HasColumnName("no_servicio");

                entity.Property(e => e.ServicioSinPago).HasColumnName("servicio_sin_pago");

                entity.Property(e => e.SubTipoServicioid).HasColumnName("sub_tipo_servicioid");

                entity.HasOne(d => d.CatCategoriaServicio)
                    .WithMany(p => p.Servicio)
                    .HasForeignKey(d => d.CatCategoriaServicioid);

                entity.HasOne(d => d.CatEstatusServicio)
                    .WithMany(p => p.Servicio)
                    .HasForeignKey(d => d.CatEstatusServicioid);

                entity.HasOne(d => d.IdClienteNavigation)
                    .WithMany(p => p.Servicio)
                    .HasForeignKey(d => d.IdCliente)
                    .HasConstraintName("ForeignKey_Servicio_Cliente");

                entity.HasOne(d => d.IdSolicitadoPorNavigation)
                    .WithMany(p => p.Servicio)
                    .HasForeignKey(d => d.IdSolicitadoPor)
                    .HasConstraintName("ForeignKey_Servicio_Solicitado_Por");

                entity.HasOne(d => d.IdSolicitudViaNavigation)
                    .WithMany(p => p.Servicio)
                    .HasForeignKey(d => d.IdSolicitudVia)
                    .HasConstraintName("ForeignKey_Servicio_Solicitud_Via");

                entity.HasOne(d => d.IdTipoServicioNavigation)
                    .WithMany(p => p.Servicio)
                    .HasForeignKey(d => d.IdTipoServicio)
                    .HasConstraintName("ForeignKey_Servicio_TipoServicio");

                entity.HasOne(d => d.SubTipoServicio)
                    .WithMany(p => p.Servicio)
                    .HasForeignKey(d => d.SubTipoServicioid);
            });

            modelBuilder.Entity<ServicioApp>(entity =>
            {
                entity.ToTable("Servicio_app");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ActivarCredito).HasColumnName("activar_credito");

                entity.Property(e => e.Actualizado).HasColumnName("actualizado");

                entity.Property(e => e.Actualizadopor).HasColumnName("actualizadopor");

                entity.Property(e => e.CatCategoriaServicioid).HasColumnName("Cat_Categoria_Servicioid");

                entity.Property(e => e.CatEstatusServicioid).HasColumnName("Cat_estatus_servicioid");

                entity.Property(e => e.Contacto).HasColumnName("contacto");

                entity.Property(e => e.Creado).HasColumnName("creado");

                entity.Property(e => e.Creadopor).HasColumnName("creadopor");

                entity.Property(e => e.DescripcionActividades).HasColumnName("descripcion_actividades");

                entity.Property(e => e.FechaServicio).HasColumnName("fecha_servicio");

                entity.Property(e => e.Ibs).HasColumnName("IBS");

                entity.Property(e => e.IdCategoriaServicio).HasColumnName("id_categoria_servicio");

                entity.Property(e => e.IdCliente).HasColumnName("id_cliente");

                entity.Property(e => e.IdDistribuidorAutorizado).HasColumnName("id_distribuidor_autorizado");

                entity.Property(e => e.IdEstatusServicio).HasColumnName("id_estatus_servicio");

                entity.Property(e => e.IdMotivoCierre).HasColumnName("id_motivo_cierre");

                entity.Property(e => e.IdSolicitadoPor).HasColumnName("id_solicitado_por");

                entity.Property(e => e.IdSolicitudVia).HasColumnName("id_solicitud_via");

                entity.Property(e => e.IdSubTipoServicio).HasColumnName("id_sub_tipo_servicio");

                entity.Property(e => e.IdTipoServicio).HasColumnName("id_tipo_servicio");

                entity.Property(e => e.NoServicio).HasColumnName("no_servicio");

                entity.Property(e => e.ServicioSinPago).HasColumnName("servicio_sin_pago");

                entity.Property(e => e.SubTipoServicioid).HasColumnName("sub_tipo_servicioid");

                entity.HasOne(d => d.CatCategoriaServicio)
                    .WithMany(p => p.ServicioApp)
                    .HasForeignKey(d => d.CatCategoriaServicioid);

                entity.HasOne(d => d.CatEstatusServicio)
                    .WithMany(p => p.ServicioApp)
                    .HasForeignKey(d => d.CatEstatusServicioid);

                entity.HasOne(d => d.IdClienteNavigation)
                    .WithMany(p => p.ServicioApp)
                    .HasForeignKey(d => d.IdCliente)
                    .HasConstraintName("ForeignKey_Servicio_app_Cliente");

                entity.HasOne(d => d.IdSolicitadoPorNavigation)
                    .WithMany(p => p.ServicioApp)
                    .HasForeignKey(d => d.IdSolicitadoPor)
                    .HasConstraintName("ForeignKey_Servicio_app_Solicitado_Por");

                entity.HasOne(d => d.IdSolicitudViaNavigation)
                    .WithMany(p => p.ServicioApp)
                    .HasForeignKey(d => d.IdSolicitudVia)
                    .HasConstraintName("ForeignKey_Servicio_app_Solicitud_Via");

                entity.HasOne(d => d.IdTipoServicioNavigation)
                    .WithMany(p => p.ServicioApp)
                    .HasForeignKey(d => d.IdTipoServicio)
                    .HasConstraintName("ForeignKey_Servicio_app_TipoServicio");

                entity.HasOne(d => d.SubTipoServicio)
                    .WithMany(p => p.ServicioApp)
                    .HasForeignKey(d => d.SubTipoServicioid);
            });

            modelBuilder.Entity<ServicioFotos>(entity =>
            {
                entity.ToTable("servicio_fotos");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdVisita).HasColumnName("id_visita");

                entity.Property(e => e.UrlFoto).HasColumnName("url_foto");

                entity.HasOne(d => d.IdVisitaNavigation)
                    .WithMany(p => p.ServicioFotos)
                    .HasForeignKey(d => d.IdVisita)
                    .HasConstraintName("FK__servicio___id_vi__23DE44F1");
            });

            modelBuilder.Entity<ServicioFotosApp>(entity =>
            {
                entity.ToTable("servicio_fotos_app");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdVisitaApp).HasColumnName("id_visita_app");

                entity.Property(e => e.UrlFoto).HasColumnName("url_foto");

                entity.HasOne(d => d.IdVisitaAppNavigation)
                    .WithMany(p => p.ServicioFotosApp)
                    .HasForeignKey(d => d.IdVisitaApp)
                    .HasConstraintName("FK__servicio___id_vi__24D2692A");
            });

            modelBuilder.Entity<ServicioSinPagos>(entity =>
            {
                entity.ToTable("Servicio_Sin_Pagos");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Nombre).HasColumnName("nombre");
            });

            modelBuilder.Entity<ServicioTroubleshooting>(entity =>
            {
                entity.ToTable("Servicio_Troubleshooting");

                entity.HasIndex(e => e.IdEstatusTroubleshooting);

                entity.HasIndex(e => e.IdServicio);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.IdEstatusTroubleshooting).HasColumnName("id_estatus_troubleshooting");

                entity.Property(e => e.IdServicio).HasColumnName("id_servicio");

                entity.Property(e => e.Observciones).HasColumnName("observciones");

                entity.HasOne(d => d.IdEstatusTroubleshootingNavigation)
                    .WithMany(p => p.ServicioTroubleshooting)
                    .HasForeignKey(d => d.IdEstatusTroubleshooting)
                    .HasConstraintName("ForeignKey_Servicio_Troubleshooting");

                entity.HasOne(d => d.IdServicioNavigation)
                    .WithMany(p => p.ServicioTroubleshooting)
                    .HasForeignKey(d => d.IdServicio)
                    .HasConstraintName("ForeignKey_Servicio_Troubleshooting_Servivo");
            });

            modelBuilder.Entity<StockInicial>(entity =>
            {
                entity.ToTable("Stock_Inicial");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.StockActual).HasColumnName("stock_actual");

                entity.Property(e => e.StockDesplazado).HasColumnName("stock_desplazado");

                entity.Property(e => e.StockInicial1).HasColumnName("stock_inicial");
            });

            modelBuilder.Entity<SubCatTipoServicio>(entity =>
            {
                entity.ToTable("Sub_cat_tipo_servicio");

                entity.HasIndex(e => e.IdTipoServicio);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.IdTipoServicio).HasColumnName("id_tipo_servicio");

                entity.Property(e => e.SubDescTipoServicio).HasColumnName("sub_desc_tipo_servicio");

                entity.HasOne(d => d.IdTipoServicioNavigation)
                    .WithMany(p => p.SubCatTipoServicio)
                    .HasForeignKey(d => d.IdTipoServicio)
                    .HasConstraintName("ForeignKey_Servicio_SubTipoServicio");
            });

            modelBuilder.Entity<SublineaCertificadoPartners>(entity =>
            {
                entity.ToTable("sublinea_certificado_partners");

                entity.Property(e => e.IdCotizacionProducto).HasColumnName("Id_cotizacion_producto");

                entity.Property(e => e.IdProductoCarrito).HasColumnName("Id_producto_carrito");

                entity.Property(e => e.IdSublinea).HasColumnName("Id_sublinea");
            });

            modelBuilder.Entity<Tecnicos>(entity =>
            {
                entity.HasIndex(e => e.IdTipoTecnico);

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .ValueGeneratedNever();

                entity.Property(e => e.Actualizado).HasColumnName("actualizado");

                entity.Property(e => e.Actualizadopor).HasColumnName("actualizadopor");

                entity.Property(e => e.Color).HasColumnName("color");

                entity.Property(e => e.Creado).HasColumnName("creado");

                entity.Property(e => e.Creadopor).HasColumnName("creadopor");

                entity.Property(e => e.IdCatTecnicosSubTipo).HasColumnName("id_cat_tecnicos_sub_Tipo");

                entity.Property(e => e.IdTipoTecnico).HasColumnName("id_tipo_tecnico");

                entity.Property(e => e.Noalmacen).HasColumnName("noalmacen");

                entity.Property(e => e.VehiculoInfo).HasColumnName("vehiculo_info");

                entity.Property(e => e.VehiculoPlacas).HasColumnName("vehiculo_placas");

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.Tecnicos)
                    .HasForeignKey<Tecnicos>(d => d.Id)
                    .HasConstraintName("ForeignKey_Users_Tecnicos");

                entity.HasOne(d => d.IdTipoTecnicoNavigation)
                    .WithMany(p => p.Tecnicos)
                    .HasForeignKey(d => d.IdTipoTecnico)
                    .HasConstraintName("ForeignKey_Users_Tecnicos_Tipo");
            });

            modelBuilder.Entity<TecnicosActividad>(entity =>
            {
                entity.ToTable("Tecnicos_Actividad");

                entity.HasIndex(e => e.IdUser);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdActividad).HasColumnName("id_actividad");

                entity.Property(e => e.IdUser).HasColumnName("id_user");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.TecnicosActividad)
                    .HasForeignKey(d => d.IdUser)
                    .HasConstraintName("ForeignKey_Users_Tecnicos_Actividad");
            });

            modelBuilder.Entity<TecnicosCobertura>(entity =>
            {
                entity.ToTable("Tecnicos_Cobertura");

                entity.HasIndex(e => e.IdCobertura);

                entity.HasIndex(e => e.IdUser);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdCobertura).HasColumnName("id_cobertura");

                entity.Property(e => e.IdUser).HasColumnName("id_user");

                entity.HasOne(d => d.IdCoberturaNavigation)
                    .WithMany(p => p.TecnicosCobertura)
                    .HasForeignKey(d => d.IdCobertura)
                    .HasConstraintName("ForeignKey_Users_Tecnicos_Cobertura_Cat");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.TecnicosCobertura)
                    .HasForeignKey(d => d.IdUser)
                    .HasConstraintName("ForeignKey_Users_Tecnicos_Cobertura");
            });

            modelBuilder.Entity<TecnicosProducto>(entity =>
            {
                entity.ToTable("Tecnicos_Producto");

                entity.HasIndex(e => e.IdCategoriaProducto);

                entity.HasIndex(e => e.IdUser);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdCategoriaProducto).HasColumnName("id_categoria_producto");

                entity.Property(e => e.IdUser).HasColumnName("id_user");

                entity.HasOne(d => d.IdCategoriaProductoNavigation)
                    .WithMany(p => p.TecnicosProducto)
                    .HasForeignKey(d => d.IdCategoriaProducto)
                    .HasConstraintName("ForeignKey_Users_Tecnicos_Producto_Cat");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.TecnicosProducto)
                    .HasForeignKey(d => d.IdUser)
                    .HasConstraintName("ForeignKey_Users_Tecnicos_Productos");
            });

            modelBuilder.Entity<TiposComprobantes>(entity =>
            {
                entity.ToTable("tipos_comprobantes");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.EsLiquidacion).HasColumnName("es_liquidacion");

                entity.Property(e => e.TipoPago).HasColumnName("tipo_pago");
            });

            modelBuilder.Entity<TokenItems>(entity =>
            {
                entity.Property(e => e.IdUser).HasColumnName("Id_user");
            });

            modelBuilder.Entity<UserClientsApp>(entity =>
            {
                entity.ToTable("User_Clients_App");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdClient).HasColumnName("id_client");

                entity.Property(e => e.IdUser).HasColumnName("id_user");

                entity.HasOne(d => d.IdClientNavigation)
                    .WithMany(p => p.UserClientsApp)
                    .HasForeignKey(d => d.IdClient)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_Clients_App_Clientes");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.UserClientsApp)
                    .HasForeignKey(d => d.IdUser)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_Clients_App_Users");
            });

            modelBuilder.Entity<UserSubLineaApp>(entity =>
            {
                entity.ToTable("user_SubLinea_App");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cantidad).HasColumnName("cantidad");

                entity.Property(e => e.IdCatSublineaProducto).HasColumnName("id_cat_sublinea_producto");

                entity.Property(e => e.IdDireccioin).HasColumnName("id_direccioin");

                entity.Property(e => e.IdUser).HasColumnName("id_user");

                entity.HasOne(d => d.IdCatSublineaProductoNavigation)
                    .WithMany(p => p.UserSubLineaApp)
                    .HasForeignKey(d => d.IdCatSublineaProducto)
                    .HasConstraintName("FK_user_SubLinea_App_Cat_SubLinea_Producto");

                entity.HasOne(d => d.IdDireccioinNavigation)
                    .WithMany(p => p.UserSubLineaApp)
                    .HasForeignKey(d => d.IdDireccioin)
                    .HasConstraintName("FK_user_SubLinea_App_Cat_Direccion");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.UserSubLineaApp)
                    .HasForeignKey(d => d.IdUser)
                    .HasConstraintName("FK_user_SubLinea_App_Users");
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.HasIndex(e => e.IdApp);

                entity.HasIndex(e => e.IdRol);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Actualizado).HasColumnName("actualizado");

                entity.Property(e => e.Actualizadopor).HasColumnName("actualizadopor");

                entity.Property(e => e.Avatar).HasColumnName("avatar");

                entity.Property(e => e.Creado).HasColumnName("creado");

                entity.Property(e => e.Creadopor).HasColumnName("creadopor");

                entity.Property(e => e.Email).HasColumnName("email");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.FechaNacimiento).HasColumnName("fecha_nacimiento");

                entity.Property(e => e.IdApp).HasColumnName("id_app");

                entity.Property(e => e.IdCanal).HasColumnName("id_canal");

                entity.Property(e => e.IdCuenta).HasColumnName("id_cuenta");

                entity.Property(e => e.IdRol).HasColumnName("id_rol");

                entity.Property(e => e.IdSucursales).HasColumnName("id_Sucursales");

                entity.Property(e => e.Materno).HasColumnName("materno");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.Nivel).HasColumnName("nivel");

                entity.Property(e => e.Password).HasColumnName("password");

                entity.Property(e => e.Paterno).HasColumnName("paterno");

                entity.Property(e => e.Telefono).HasColumnName("telefono");

                entity.Property(e => e.TelefonoMovil).HasColumnName("telefono_movil");

                entity.Property(e => e.Username).HasColumnName("username");

                entity.HasOne(d => d.IdAppNavigation)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.IdApp)
                    .HasConstraintName("ForeignKey_Users_App");

                entity.HasOne(d => d.IdRolNavigation)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.IdRol)
                    .HasConstraintName("ForeignKey_Users_Rol");
            });

            modelBuilder.Entity<Vendedores>(entity =>
            {
                entity.HasIndex(e => e.IdEstado);

                entity.HasIndex(e => e.IdMunicipio);

                entity.Property(e => e.Actualizado).HasColumnName("actualizado");

                entity.Property(e => e.Actualizadopor).HasColumnName("actualizadopor");

                entity.Property(e => e.CalleNumero).HasColumnName("calle_numero");

                entity.Property(e => e.Colonia).HasColumnName("colonia");

                entity.Property(e => e.Cp).HasColumnName("CP");

                entity.Property(e => e.Creado).HasColumnName("creado");

                entity.Property(e => e.Creadopor).HasColumnName("creadopor");

                entity.Property(e => e.Email).HasColumnName("email");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.IdEstado).HasColumnName("id_estado");

                entity.Property(e => e.IdMunicipio).HasColumnName("id_municipio");

                entity.Property(e => e.Materno).HasColumnName("materno");

                entity.Property(e => e.Nombre).HasColumnName("nombre");

                entity.Property(e => e.NombreComercial).HasColumnName("nombre_comercial");

                entity.Property(e => e.NombreContacto).HasColumnName("nombre_contacto");

                entity.Property(e => e.Paterno).HasColumnName("paterno");

                entity.Property(e => e.Referencias).HasColumnName("referencias");

                entity.Property(e => e.Telefono).HasColumnName("telefono");

                entity.Property(e => e.TelefonoMovil).HasColumnName("telefono_movil");

                entity.HasOne(d => d.IdEstadoNavigation)
                    .WithMany(p => p.Vendedores)
                    .HasForeignKey(d => d.IdEstado)
                    .HasConstraintName("ForeignKey_Vendedores_Estado");

                entity.HasOne(d => d.IdMunicipioNavigation)
                    .WithMany(p => p.Vendedores)
                    .HasForeignKey(d => d.IdMunicipio)
                    .HasConstraintName("ForeignKey_Vendedores_Mun");
            });

            modelBuilder.Entity<Visita>(entity =>
            {
                entity.HasIndex(e => e.IdServicio);

                entity.HasIndex(e => e.Tecnicosid);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ActividadesRealizar).HasColumnName("actividades_realizar");

                entity.Property(e => e.AsignacionRefacciones).HasColumnName("asignacion_refacciones");

                entity.Property(e => e.Cantidad)
                    .HasColumnName("cantidad")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Comprobante).HasColumnName("comprobante");

                entity.Property(e => e.Concepto).HasColumnName("concepto");

                entity.Property(e => e.CotizacionPagada).HasColumnName("cotizacion_pagada");

                entity.Property(e => e.EntregaRefacciones).HasColumnName("entrega_refacciones");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.Factura).HasColumnName("factura");

                entity.Property(e => e.FecPago).HasColumnName("fec_pago");

                entity.Property(e => e.FechaAgendado).HasColumnName("fecha_agendado");

                entity.Property(e => e.FechaCancelacion)
                    .HasColumnName("fecha_cancelacion")
                    .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                entity.Property(e => e.FechaCompletado)
                    .HasColumnName("fecha_completado")
                    .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                entity.Property(e => e.FechaDeposito).HasColumnName("fecha_deposito");

                entity.Property(e => e.FechaEntregaRefaccion).HasColumnName("fecha_entrega_refaccion");

                entity.Property(e => e.FechaFinVisita).HasColumnName("fecha_fin_visita");

                entity.Property(e => e.FechaInicioVisita).HasColumnName("fecha_inicio_visita");

                entity.Property(e => e.FechaLimitePago).HasColumnName("fecha_limite_pago");

                entity.Property(e => e.FechaVisita).HasColumnName("fecha_visita");

                entity.Property(e => e.Garantia).HasColumnName("garantia");

                entity.Property(e => e.Hora).HasColumnName("hora");

                entity.Property(e => e.HoraFin).HasColumnName("hora_fin");

                entity.Property(e => e.IdDireccion).HasColumnName("id_direccion");

                entity.Property(e => e.IdPago).HasColumnName("id_pago");

                entity.Property(e => e.IdServicio).HasColumnName("id_servicio");

                entity.Property(e => e.ImagenFirma).HasColumnName("imagen_firma");

                entity.Property(e => e.ImagenPagoReferenciado).HasColumnName("imagen_pago_referenciado");

                entity.Property(e => e.LatitudFin).HasColumnName("latitud_fin");

                entity.Property(e => e.LatitudInicio).HasColumnName("latitud_inicio");

                entity.Property(e => e.LongitudFin).HasColumnName("longitud_fin");

                entity.Property(e => e.LongitudInicio).HasColumnName("longitud_inicio");

                entity.Property(e => e.MotivaCancelación).HasColumnName("motiva_cancelación");

                entity.Property(e => e.MotivaCompletado).HasColumnName("motiva_completado");

                entity.Property(e => e.NoOperacion).HasColumnName("no_operacion");

                entity.Property(e => e.Pagado).HasColumnName("pagado");

                entity.Property(e => e.PagoPendiente).HasColumnName("pago_pendiente");

                entity.Property(e => e.PersonaRecibe).HasColumnName("persona_recibe");

                entity.Property(e => e.PreDiagnostico).HasColumnName("pre_diagnostico");

                entity.Property(e => e.Regendada).HasColumnName("regendada");

                entity.Property(e => e.SiAceptoTecnicoRefaccion).HasColumnName("si_acepto_tecnico_refaccion");

                entity.Property(e => e.SuccesPago).HasColumnName("succes_pago");

                entity.Property(e => e.TerminosCondiciones).HasColumnName("terminos_condiciones");

                entity.Property(e => e.UrlPdfChecklist).HasColumnName("url_pdf_checklist");

                entity.Property(e => e.UrlPdfConfirmacionVisita).HasColumnName("url_pdf_confirmacion_visita");

                entity.Property(e => e.UrlPdfCotizacion).HasColumnName("url_pdf_cotizacion");

                entity.Property(e => e.UrlPpdfReporte).HasColumnName("url_ppdf_reporte");

                entity.HasOne(d => d.IdServicioNavigation)
                    .WithMany(p => p.Visita)
                    .HasForeignKey(d => d.IdServicio)
                    .HasConstraintName("ForeignKey_Servicio_Visita");

                entity.HasOne(d => d.Tecnicos)
                    .WithMany(p => p.Visita)
                    .HasForeignKey(d => d.Tecnicosid);
            });

            modelBuilder.Entity<VisitaApp>(entity =>
            {
                entity.ToTable("Visita_app");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ActividadesRealizar).HasColumnName("actividades_realizar");

                entity.Property(e => e.AsignacionRefacciones).HasColumnName("asignacion_refacciones");

                entity.Property(e => e.Cantidad)
                    .HasColumnName("cantidad")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Comprobante).HasColumnName("comprobante");

                entity.Property(e => e.Concepto).HasColumnName("concepto");

                entity.Property(e => e.EntregaRefacciones).HasColumnName("entrega_refacciones");

                entity.Property(e => e.Estatus).HasColumnName("estatus");

                entity.Property(e => e.Factura).HasColumnName("factura");

                entity.Property(e => e.FecPago).HasColumnName("fec_pago");

                entity.Property(e => e.FechaAgendado).HasColumnName("fecha_agendado");

                entity.Property(e => e.FechaCancelacion)
                    .HasColumnName("fecha_cancelacion")
                    .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                entity.Property(e => e.FechaCompletado)
                    .HasColumnName("fecha_completado")
                    .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                entity.Property(e => e.FechaDeposito).HasColumnName("fecha_deposito");

                entity.Property(e => e.FechaEntregaRefaccion).HasColumnName("fecha_entrega_refaccion");

                entity.Property(e => e.FechaFinVisita).HasColumnName("fecha_fin_visita");

                entity.Property(e => e.FechaInicioVisita).HasColumnName("fecha_inicio_visita");

                entity.Property(e => e.FechaLimitePago).HasColumnName("fecha_limite_pago");

                entity.Property(e => e.FechaVisita).HasColumnName("fecha_visita");

                entity.Property(e => e.Garantia).HasColumnName("garantia");

                entity.Property(e => e.Hora).HasColumnName("hora");

                entity.Property(e => e.HoraFin).HasColumnName("hora_fin");

                entity.Property(e => e.IdDireccion).HasColumnName("id_direccion");

                entity.Property(e => e.IdPago).HasColumnName("id_pago");

                entity.Property(e => e.IdServicio).HasColumnName("id_servicio");

                entity.Property(e => e.ImagenFirma).HasColumnName("imagen_firma");

                entity.Property(e => e.ImagenPagoReferenciado).HasColumnName("imagen_pago_referenciado");

                entity.Property(e => e.LatitudFin).HasColumnName("latitud_fin");

                entity.Property(e => e.LatitudInicio).HasColumnName("latitud_inicio");

                entity.Property(e => e.LongitudFin).HasColumnName("longitud_fin");

                entity.Property(e => e.LongitudInicio).HasColumnName("longitud_inicio");

                entity.Property(e => e.MotivaCancelación).HasColumnName("motiva_cancelación");

                entity.Property(e => e.MotivaCompletado).HasColumnName("motiva_completado");

                entity.Property(e => e.NoOperacion).HasColumnName("no_operacion");

                entity.Property(e => e.Pagado).HasColumnName("pagado");

                entity.Property(e => e.PagoPendiente).HasColumnName("pago_pendiente");

                entity.Property(e => e.PersonaRecibe).HasColumnName("persona_recibe");

                entity.Property(e => e.PreDiagnostico).HasColumnName("pre_diagnostico");

                entity.Property(e => e.Regendada).HasColumnName("regendada");

                entity.Property(e => e.SiAceptoTecnicoRefaccion).HasColumnName("si_acepto_tecnico_refaccion");

                entity.Property(e => e.SuccesPago).HasColumnName("succes_pago");

                entity.Property(e => e.Tecnicosid).HasDefaultValueSql("((0))");

                entity.Property(e => e.TerminosCondiciones).HasColumnName("terminos_condiciones");

                entity.Property(e => e.UrlPdfChecklist).HasColumnName("url_pdf_checklist");

                entity.Property(e => e.UrlPdfConfirmacionVisita).HasColumnName("url_pdf_confirmacion_visita");

                entity.Property(e => e.UrlPdfCotizacion).HasColumnName("url_pdf_cotizacion");

                entity.Property(e => e.UrlPpdfReporte).HasColumnName("url_ppdf_reporte");

                entity.HasOne(d => d.IdServicioNavigation)
                    .WithMany(p => p.VisitaApp)
                    .HasForeignKey(d => d.IdServicio)
                    .HasConstraintName("ForeignKey_Servicio_Visita_app");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}